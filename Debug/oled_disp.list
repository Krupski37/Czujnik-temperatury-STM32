
oled_disp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee0  08004fc8  08004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea8  08005ea8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ea8  08005ea8  00015ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005eb0  08005eb0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  2000007c  08005f34  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  08005f34  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013021  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a7a  00000000  00000000  000330cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00035b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00036ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bba  00000000  00000000  00037af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ee9  00000000  00000000  0004f6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e22  00000000  00000000  00064593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f53b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004850  00000000  00000000  000f5408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004fb0 	.word	0x08004fb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08004fb0 	.word	0x08004fb0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	4b20      	ldr	r3, [pc, #128]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a1f      	ldr	r2, [pc, #124]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a18      	ldr	r2, [pc, #96]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <MX_GPIO_Init+0xa0>)
 80005f6:	f001 fbd5 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80005fa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80005fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_GPIO_Init+0xa0>)
 8000614:	f001 fa2a 	bl	8001a6c <HAL_GPIO_Init>

}
 8000618:	bf00      	nop
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40020800 	.word	0x40020800

08000628 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_I2C1_Init+0x50>)
 800062e:	4a13      	ldr	r2, [pc, #76]	; (800067c <MX_I2C1_Init+0x54>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_I2C1_Init+0x50>)
 8000634:	4a12      	ldr	r2, [pc, #72]	; (8000680 <MX_I2C1_Init+0x58>)
 8000636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_I2C1_Init+0x50>)
 8000646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_I2C1_Init+0x50>)
 8000666:	f001 fbb7 	bl	8001dd8 <HAL_I2C_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000670:	f000 f9ac 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000098 	.word	0x20000098
 800067c:	40005400 	.word	0x40005400
 8000680:	00061a80 	.word	0x00061a80

08000684 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a19      	ldr	r2, [pc, #100]	; (8000708 <HAL_I2C_MspInit+0x84>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d12c      	bne.n	8000700 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <HAL_I2C_MspInit+0x88>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a17      	ldr	r2, [pc, #92]	; (800070c <HAL_I2C_MspInit+0x88>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <HAL_I2C_MspInit+0x88>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006c8:	2312      	movs	r3, #18
 80006ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006d4:	2304      	movs	r3, #4
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	480c      	ldr	r0, [pc, #48]	; (8000710 <HAL_I2C_MspInit+0x8c>)
 80006e0:	f001 f9c4 	bl	8001a6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <HAL_I2C_MspInit+0x88>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a07      	ldr	r2, [pc, #28]	; (800070c <HAL_I2C_MspInit+0x88>)
 80006ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_I2C_MspInit+0x88>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000700:	bf00      	nop
 8000702:	3728      	adds	r7, #40	; 0x28
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40005400 	.word	0x40005400
 800070c:	40023800 	.word	0x40023800
 8000710:	40020400 	.word	0x40020400

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000718:	f000 ff6e 	bl	80015f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071c:	f000 f842 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000720:	f7ff ff30 	bl	8000584 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000724:	f7ff ff80 	bl	8000628 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000728:	f000 fbc2 	bl	8000eb0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800072c:	f000 fc2c 	bl	8000f88 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 8000730:	f000 fd06 	bl	8001140 <ssd1306_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073a:	4812      	ldr	r0, [pc, #72]	; (8000784 <main+0x70>)
 800073c:	f001 fb32 	bl	8001da4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_TIM_Base_Start(&htim2);
 8000740:	4811      	ldr	r0, [pc, #68]	; (8000788 <main+0x74>)
 8000742:	f002 fc4d 	bl	8002fe0 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart1,&ParseBuffer,1);
 8000746:	2201      	movs	r2, #1
 8000748:	4910      	ldr	r1, [pc, #64]	; (800078c <main+0x78>)
 800074a:	4811      	ldr	r0, [pc, #68]	; (8000790 <main+0x7c>)
 800074c:	f002 fff7 	bl	800373e <HAL_UART_Receive_IT>
  init_dht11(&dht, &htim2, DHT11_PORT, DHT11_PIN);
 8000750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000754:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <main+0x70>)
 8000756:	490c      	ldr	r1, [pc, #48]	; (8000788 <main+0x74>)
 8000758:	480e      	ldr	r0, [pc, #56]	; (8000794 <main+0x80>)
 800075a:	f000 f93c 	bl	80009d6 <init_dht11>

  while (1)
  {

	  if(flaga){
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <main+0x84>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d00a      	beq.n	800077c <main+0x68>
		  readDHT11(&dht);
 8000766:	480b      	ldr	r0, [pc, #44]	; (8000794 <main+0x80>)
 8000768:	f000 f986 	bl	8000a78 <readDHT11>
		  temp = dht.temperature;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <main+0x80>)
 800076e:	7b1a      	ldrb	r2, [r3, #12]
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <main+0x88>)
 8000772:	701a      	strb	r2, [r3, #0]
		  hum = dht.humidty;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <main+0x80>)
 8000776:	7b5a      	ldrb	r2, [r3, #13]
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <main+0x8c>)
 800077a:	701a      	strb	r2, [r3, #0]
	  }

	  printScreen();
 800077c:	f000 f872 	bl	8000864 <printScreen>
	  if(flaga){
 8000780:	e7ed      	b.n	800075e <main+0x4a>
 8000782:	bf00      	nop
 8000784:	40020800 	.word	0x40020800
 8000788:	20000160 	.word	0x20000160
 800078c:	20000126 	.word	0x20000126
 8000790:	200001a8 	.word	0x200001a8
 8000794:	20000114 	.word	0x20000114
 8000798:	20000000 	.word	0x20000000
 800079c:	20000124 	.word	0x20000124
 80007a0:	20000125 	.word	0x20000125

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	; 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	2230      	movs	r2, #48	; 0x30
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f003 ff94 	bl	80046e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	4b23      	ldr	r3, [pc, #140]	; (800085c <SystemClock_Config+0xb8>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a22      	ldr	r2, [pc, #136]	; (800085c <SystemClock_Config+0xb8>)
 80007d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b20      	ldr	r3, [pc, #128]	; (800085c <SystemClock_Config+0xb8>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <SystemClock_Config+0xbc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <SystemClock_Config+0xbc>)
 80007f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <SystemClock_Config+0xbc>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080c:	2310      	movs	r3, #16
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000810:	2300      	movs	r3, #0
 8000812:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0320 	add.w	r3, r7, #32
 8000818:	4618      	mov	r0, r3
 800081a:	f001 ff39 	bl	8002690 <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000824:	f000 f8d2 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f002 f99c 	bl	8002b80 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800084e:	f000 f8bd 	bl	80009cc <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3750      	adds	r7, #80	; 0x50
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <printScreen>:

/* USER CODE BEGIN 4 */

void printScreen()
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af02      	add	r7, sp, #8
		sprintf(text_temp," %d C", temp);
 800086a:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <printScreen+0x8c>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	4920      	ldr	r1, [pc, #128]	; (80008f4 <printScreen+0x90>)
 8000872:	4821      	ldr	r0, [pc, #132]	; (80008f8 <printScreen+0x94>)
 8000874:	f003 ff3c 	bl	80046f0 <siprintf>
		sprintf(text_hum," %d %%", hum);
 8000878:	4b20      	ldr	r3, [pc, #128]	; (80008fc <printScreen+0x98>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	4920      	ldr	r1, [pc, #128]	; (8000900 <printScreen+0x9c>)
 8000880:	4820      	ldr	r0, [pc, #128]	; (8000904 <printScreen+0xa0>)
 8000882:	f003 ff35 	bl	80046f0 <siprintf>


	  ssd1306_Fill(Black);
 8000886:	2000      	movs	r0, #0
 8000888:	f000 fcc4 	bl	8001214 <ssd1306_Fill>

	  if(flaga) {
 800088c:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <printScreen+0xa4>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d027      	beq.n	80008e4 <printScreen+0x80>
		  ssd1306_DrawBitmap(0, 0, weather, 32, 32, White);
 8000894:	2301      	movs	r3, #1
 8000896:	9301      	str	r3, [sp, #4]
 8000898:	2320      	movs	r3, #32
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2320      	movs	r3, #32
 800089e:	4a1b      	ldr	r2, [pc, #108]	; (800090c <printScreen+0xa8>)
 80008a0:	2100      	movs	r1, #0
 80008a2:	2000      	movs	r0, #0
 80008a4:	f000 fe1c 	bl	80014e0 <ssd1306_DrawBitmap>

		  ssd1306_DrawBitmap(0, 32, humidity, 32, 32, White);
 80008a8:	2301      	movs	r3, #1
 80008aa:	9301      	str	r3, [sp, #4]
 80008ac:	2320      	movs	r3, #32
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2320      	movs	r3, #32
 80008b2:	4a17      	ldr	r2, [pc, #92]	; (8000910 <printScreen+0xac>)
 80008b4:	2120      	movs	r1, #32
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 fe12 	bl	80014e0 <ssd1306_DrawBitmap>


		  ssd1306_SetCursor(35, 10);
 80008bc:	210a      	movs	r1, #10
 80008be:	2023      	movs	r0, #35	; 0x23
 80008c0:	f000 fdf6 	bl	80014b0 <ssd1306_SetCursor>
		  ssd1306_WriteString(text_temp, Font_11x18, White);
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <printScreen+0xb0>)
 80008c6:	2301      	movs	r3, #1
 80008c8:	ca06      	ldmia	r2, {r1, r2}
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <printScreen+0x94>)
 80008cc:	f000 fdca 	bl	8001464 <ssd1306_WriteString>
		  ssd1306_SetCursor(35, 42);
 80008d0:	212a      	movs	r1, #42	; 0x2a
 80008d2:	2023      	movs	r0, #35	; 0x23
 80008d4:	f000 fdec 	bl	80014b0 <ssd1306_SetCursor>
		  ssd1306_WriteString(text_hum, Font_11x18, White);
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <printScreen+0xb0>)
 80008da:	2301      	movs	r3, #1
 80008dc:	ca06      	ldmia	r2, {r1, r2}
 80008de:	4809      	ldr	r0, [pc, #36]	; (8000904 <printScreen+0xa0>)
 80008e0:	f000 fdc0 	bl	8001464 <ssd1306_WriteString>
	  }


	  ssd1306_UpdateScreen();
 80008e4:	f000 fcba 	bl	800125c <ssd1306_UpdateScreen>



}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000124 	.word	0x20000124
 80008f4:	08004fc8 	.word	0x08004fc8
 80008f8:	200000ec 	.word	0x200000ec
 80008fc:	20000125 	.word	0x20000125
 8000900:	08004fd0 	.word	0x08004fd0
 8000904:	20000100 	.word	0x20000100
 8000908:	20000000 	.word	0x20000000
 800090c:	08005000 	.word	0x08005000
 8000910:	08005080 	.word	0x08005080
 8000914:	20000008 	.word	0x20000008

08000918 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]


  if(huart->Instance==USART1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a20      	ldr	r2, [pc, #128]	; (80009a8 <HAL_UART_RxCpltCallback+0x90>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d139      	bne.n	800099e <HAL_UART_RxCpltCallback+0x86>
  {
    if(ParseBuffer==78) // 78 -> N w Ascii
 800092a:	4b20      	ldr	r3, [pc, #128]	; (80009ac <HAL_UART_RxCpltCallback+0x94>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b4e      	cmp	r3, #78	; 0x4e
 8000930:	d103      	bne.n	800093a <HAL_UART_RxCpltCallback+0x22>
    {
    	flaga = 0;
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <HAL_UART_RxCpltCallback+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	e02c      	b.n	8000994 <HAL_UART_RxCpltCallback+0x7c>
    }
    else if (ParseBuffer==89) // 89 -> Y w Ascii
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <HAL_UART_RxCpltCallback+0x94>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b59      	cmp	r3, #89	; 0x59
 8000940:	d103      	bne.n	800094a <HAL_UART_RxCpltCallback+0x32>
    {
    	flaga = 1;
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <HAL_UART_RxCpltCallback+0x98>)
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	e024      	b.n	8000994 <HAL_UART_RxCpltCallback+0x7c>
    }
    else if(ParseBuffer==84) // 84 -> T w Ascii
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <HAL_UART_RxCpltCallback+0x94>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b54      	cmp	r3, #84	; 0x54
 8000950:	d10e      	bne.n	8000970 <HAL_UART_RxCpltCallback+0x58>
    {
    	sprintf(data, "Temperatura: %d \r\n", temp);
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_UART_RxCpltCallback+0x9c>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	4917      	ldr	r1, [pc, #92]	; (80009b8 <HAL_UART_RxCpltCallback+0xa0>)
 800095a:	4818      	ldr	r0, [pc, #96]	; (80009bc <HAL_UART_RxCpltCallback+0xa4>)
 800095c:	f003 fec8 	bl	80046f0 <siprintf>
    	HAL_UART_Transmit(&huart1, (uint8_t *)data, sizeof(data), HAL_MAX_DELAY);
 8000960:	f04f 33ff 	mov.w	r3, #4294967295
 8000964:	2232      	movs	r2, #50	; 0x32
 8000966:	4915      	ldr	r1, [pc, #84]	; (80009bc <HAL_UART_RxCpltCallback+0xa4>)
 8000968:	4815      	ldr	r0, [pc, #84]	; (80009c0 <HAL_UART_RxCpltCallback+0xa8>)
 800096a:	f002 fe56 	bl	800361a <HAL_UART_Transmit>
 800096e:	e011      	b.n	8000994 <HAL_UART_RxCpltCallback+0x7c>
    }else if(ParseBuffer==72)  // 72 -> H w Ascii
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_UART_RxCpltCallback+0x94>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b48      	cmp	r3, #72	; 0x48
 8000976:	d10d      	bne.n	8000994 <HAL_UART_RxCpltCallback+0x7c>
    {
    	sprintf(data, "Wilgotnosc: %d \r\n", hum);
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_UART_RxCpltCallback+0xac>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4912      	ldr	r1, [pc, #72]	; (80009c8 <HAL_UART_RxCpltCallback+0xb0>)
 8000980:	480e      	ldr	r0, [pc, #56]	; (80009bc <HAL_UART_RxCpltCallback+0xa4>)
 8000982:	f003 feb5 	bl	80046f0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)data, sizeof(data), HAL_MAX_DELAY);
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
 800098a:	2232      	movs	r2, #50	; 0x32
 800098c:	490b      	ldr	r1, [pc, #44]	; (80009bc <HAL_UART_RxCpltCallback+0xa4>)
 800098e:	480c      	ldr	r0, [pc, #48]	; (80009c0 <HAL_UART_RxCpltCallback+0xa8>)
 8000990:	f002 fe43 	bl	800361a <HAL_UART_Transmit>
    }

    HAL_UART_Receive_IT(&huart1,&ParseBuffer,1);
 8000994:	2201      	movs	r2, #1
 8000996:	4905      	ldr	r1, [pc, #20]	; (80009ac <HAL_UART_RxCpltCallback+0x94>)
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <HAL_UART_RxCpltCallback+0xa8>)
 800099a:	f002 fed0 	bl	800373e <HAL_UART_Receive_IT>
  }




}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40011000 	.word	0x40011000
 80009ac:	20000126 	.word	0x20000126
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000124 	.word	0x20000124
 80009b8:	08004fd8 	.word	0x08004fd8
 80009bc:	20000128 	.word	0x20000128
 80009c0:	200001a8 	.word	0x200001a8
 80009c4:	20000125 	.word	0x20000125
 80009c8:	08004fec 	.word	0x08004fec

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <Error_Handler+0x8>

080009d6 <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 80009d6:	b480      	push	{r7}
 80009d8:	b085      	sub	sp, #20
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	609a      	str	r2, [r3, #8]
	dht->port = port;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	887a      	ldrh	r2, [r7, #2]
 80009f4:	809a      	strh	r2, [r3, #4]
}
 80009f6:	bf00      	nop
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b088      	sub	sp, #32
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 8000a1e:	78fb      	ldrb	r3, [r7, #3]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d111      	bne.n	8000a48 <set_dht11_gpio_mode+0x46>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	889b      	ldrh	r3, [r3, #4]
 8000a28:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f107 020c 	add.w	r2, r7, #12
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 f813 	bl	8001a6c <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 8000a46:	e013      	b.n	8000a70 <set_dht11_gpio_mode+0x6e>
	}else if(pMode == INPUT)
 8000a48:	78fb      	ldrb	r3, [r7, #3]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d110      	bne.n	8000a70 <set_dht11_gpio_mode+0x6e>
	  GPIO_InitStruct.Pin = dht->pin;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	889b      	ldrh	r3, [r3, #4]
 8000a52:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f107 020c 	add.w	r2, r7, #12
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fffe 	bl	8001a6c <HAL_GPIO_Init>
}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	; 0x50
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000a84:	2300      	movs	r3, #0
 8000a86:	86bb      	strh	r3, [r7, #52]	; 0x34
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000a94:	2300      	movs	r3, #0
 8000a96:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ffaa 	bl	8000a02 <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6818      	ldr	r0, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	889b      	ldrh	r3, [r3, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f001 f973 	bl	8001da4 <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 8000abe:	2012      	movs	r0, #18
 8000ac0:	f000 fe0c 	bl	80016dc <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 fa87 	bl	8002fe0 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ff94 	bl	8000a02 <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000ae4:	e00b      	b.n	8000afe <readDHT11+0x86>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000af4:	d903      	bls.n	8000afe <readDHT11+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
 8000af6:	b662      	cpsie	i
}
 8000af8:	bf00      	nop
			__enable_irq();
			return 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e130      	b.n	8000d60 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	889b      	ldrh	r3, [r3, #4]
 8000b06:	4619      	mov	r1, r3
 8000b08:	4610      	mov	r0, r2
 8000b0a:	f001 f933 	bl	8001d74 <HAL_GPIO_ReadPin>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d0e8      	beq.n	8000ae6 <readDHT11+0x6e>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8000b1e:	e00b      	b.n	8000b38 <readDHT11+0xc0>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b2e:	d903      	bls.n	8000b38 <readDHT11+0xc0>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b30:	b662      	cpsie	i
}
 8000b32:	bf00      	nop
			__enable_irq();
			return 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	e113      	b.n	8000d60 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	889b      	ldrh	r3, [r3, #4]
 8000b40:	4619      	mov	r1, r3
 8000b42:	4610      	mov	r0, r2
 8000b44:	f001 f916 	bl	8001d74 <HAL_GPIO_ReadPin>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d0e8      	beq.n	8000b20 <readDHT11+0xa8>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b56:	86fb      	strh	r3, [r7, #54]	; 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000b62:	e00b      	b.n	8000b7c <readDHT11+0x104>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b72:	d903      	bls.n	8000b7c <readDHT11+0x104>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b74:	b662      	cpsie	i
}
 8000b76:	bf00      	nop
			__enable_irq();
			return 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e0f1      	b.n	8000d60 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	889b      	ldrh	r3, [r3, #4]
 8000b84:	4619      	mov	r1, r3
 8000b86:	4610      	mov	r0, r2
 8000b88:	f001 f8f4 	bl	8001d74 <HAL_GPIO_ReadPin>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d0e8      	beq.n	8000b64 <readDHT11+0xec>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9a:	86bb      	strh	r3, [r7, #52]	; 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8000b9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000b9e:	2b4a      	cmp	r3, #74	; 0x4a
 8000ba0:	d80c      	bhi.n	8000bbc <readDHT11+0x144>
 8000ba2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000ba4:	2b55      	cmp	r3, #85	; 0x55
 8000ba6:	d909      	bls.n	8000bbc <readDHT11+0x144>
 8000ba8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000baa:	2b4a      	cmp	r3, #74	; 0x4a
 8000bac:	d806      	bhi.n	8000bbc <readDHT11+0x144>
 8000bae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000bb0:	2b55      	cmp	r3, #85	; 0x55
 8000bb2:	d903      	bls.n	8000bbc <readDHT11+0x144>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bb4:	b662      	cpsie	i
}
 8000bb6:	bf00      	nop
	{
		__enable_irq();
		return 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e0d1      	b.n	8000d60 <readDHT11+0x2e8>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8000bc0:	e05d      	b.n	8000c7e <readDHT11+0x206>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8000bcc:	e00b      	b.n	8000be6 <readDHT11+0x16e>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bdc:	d903      	bls.n	8000be6 <readDHT11+0x16e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bde:	b662      	cpsie	i
}
 8000be0:	bf00      	nop
				__enable_irq();
				return 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e0bc      	b.n	8000d60 <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	889b      	ldrh	r3, [r3, #4]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	f001 f8bf 	bl	8001d74 <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0e8      	beq.n	8000bce <readDHT11+0x156>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000c06:	e00b      	b.n	8000c20 <readDHT11+0x1a8>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c16:	d903      	bls.n	8000c20 <readDHT11+0x1a8>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c18:	b662      	cpsie	i
}
 8000c1a:	bf00      	nop
				__enable_irq();
				return 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e09f      	b.n	8000d60 <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	889b      	ldrh	r3, [r3, #4]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	f001 f8a2 	bl	8001d74 <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d0e8      	beq.n	8000c08 <readDHT11+0x190>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3e:	86fb      	strh	r3, [r7, #54]	; 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 8000c40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000c42:	2b14      	cmp	r3, #20
 8000c44:	d906      	bls.n	8000c54 <readDHT11+0x1dc>
 8000c46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000c48:	2b1d      	cmp	r3, #29
 8000c4a:	d803      	bhi.n	8000c54 <readDHT11+0x1dc>
		{
			mBit = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000c52:	e008      	b.n	8000c66 <readDHT11+0x1ee>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 8000c54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000c56:	2b3c      	cmp	r3, #60	; 0x3c
 8000c58:	d905      	bls.n	8000c66 <readDHT11+0x1ee>
 8000c5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000c5c:	2b4f      	cmp	r3, #79	; 0x4f
 8000c5e:	d802      	bhi.n	8000c66 <readDHT11+0x1ee>
		{
			 mBit = 1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 8000c66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000c6a:	b2d9      	uxtb	r1, r3
 8000c6c:	f107 0208 	add.w	r2, r7, #8
 8000c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c72:	4413      	add	r3, r2
 8000c74:	460a      	mov	r2, r1
 8000c76:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 8000c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8000c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c80:	2b27      	cmp	r3, #39	; 0x27
 8000c82:	dd9e      	ble.n	8000bc2 <readDHT11+0x14a>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 fa03 	bl	8003094 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c8e:	b662      	cpsie	i
}
 8000c90:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	643b      	str	r3, [r7, #64]	; 0x40
 8000c96:	e011      	b.n	8000cbc <readDHT11+0x244>
	{
		humVal += mData[i];
 8000c98:	f107 0208 	add.w	r2, r7, #8
 8000c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781a      	ldrb	r2, [r3, #0]
 8000ca2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ca6:	4413      	add	r3, r2
 8000ca8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		humVal = humVal << 1;
 8000cac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	for(int i = 0; i < 8; i++)
 8000cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cb8:	3301      	adds	r3, #1
 8000cba:	643b      	str	r3, [r7, #64]	; 0x40
 8000cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cbe:	2b07      	cmp	r3, #7
 8000cc0:	ddea      	ble.n	8000c98 <readDHT11+0x220>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cc6:	e011      	b.n	8000cec <readDHT11+0x274>
	{
		tempVal += mData[i];
 8000cc8:	f107 0208 	add.w	r2, r7, #8
 8000ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cce:	4413      	add	r3, r2
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000cd6:	4413      	add	r3, r2
 8000cd8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		tempVal = tempVal << 1;
 8000cdc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	for(int i = 16; i < 24; i++)
 8000ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ce8:	3301      	adds	r3, #1
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cee:	2b17      	cmp	r3, #23
 8000cf0:	ddea      	ble.n	8000cc8 <readDHT11+0x250>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cf6:	e011      	b.n	8000d1c <readDHT11+0x2a4>
	{
		parityVal += mData[i];
 8000cf8:	f107 0208 	add.w	r2, r7, #8
 8000cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cfe:	4413      	add	r3, r2
 8000d00:	781a      	ldrb	r2, [r3, #0]
 8000d02:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d06:	4413      	add	r3, r2
 8000d08:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		parityVal = parityVal << 1;
 8000d0c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i = 32; i < 40; i++)
 8000d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d18:	3301      	adds	r3, #1
 8000d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d1e:	2b27      	cmp	r3, #39	; 0x27
 8000d20:	ddea      	ble.n	8000cf8 <readDHT11+0x280>
	}

	parityVal = parityVal >> 1;
 8000d22:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d26:	085b      	lsrs	r3, r3, #1
 8000d28:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	humVal = humVal >> 1;
 8000d2c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000d30:	085b      	lsrs	r3, r3, #1
 8000d32:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	tempVal = tempVal >> 1;
 8000d36:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000d3a:	085b      	lsrs	r3, r3, #1
 8000d3c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	genParity = humVal + tempVal;
 8000d40:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000d44:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000d48:	4413      	add	r3, r2
 8000d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

//	if(genParity == parityVal)

	dht->temperature = tempVal;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000d54:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000d5c:	735a      	strb	r2, [r3, #13]


	return 1;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3750      	adds	r7, #80	; 0x50
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <NMI_Handler+0x4>

08000dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e04:	f000 fc4a 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <USART1_IRQHandler+0x10>)
 8000e12:	f002 fcc5 	bl	80037a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200001a8 	.word	0x200001a8

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f003 fc0e 	bl	8004670 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20010000 	.word	0x20010000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	2000015c 	.word	0x2000015c
 8000e88:	20000608 	.word	0x20000608

08000e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef4:	4813      	ldr	r0, [pc, #76]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ef6:	f002 f823 	bl	8002f40 <HAL_TIM_Base_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f00:	f7ff fd64 	bl	80009cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000f12:	f002 f8e6 	bl	80030e2 <HAL_TIM_ConfigClockSource>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f1c:	f7ff fd56 	bl	80009cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000f2e:	f002 fab9 	bl	80034a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f38:	f7ff fd48 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000160 	.word	0x20000160

08000f48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f58:	d10d      	bne.n	8000f76 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_TIM_Base_MspInit+0x3c>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_TIM_Base_MspInit+0x3c>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_TIM_Base_MspInit+0x3c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f76:	bf00      	nop
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800

08000f88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <MX_USART1_UART_Init+0x50>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000f94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000fc0:	f002 fade 	bl	8003580 <HAL_UART_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fca:	f7ff fcff 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001a8 	.word	0x200001a8
 8000fd8:	40011000 	.word	0x40011000

08000fdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <HAL_UART_MspInit+0x94>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d134      	bne.n	8001068 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <HAL_UART_MspInit+0x98>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <HAL_UART_MspInit+0x98>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	6453      	str	r3, [r2, #68]	; 0x44
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <HAL_UART_MspInit+0x98>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_UART_MspInit+0x98>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a14      	ldr	r2, [pc, #80]	; (8001074 <HAL_UART_MspInit+0x98>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_UART_MspInit+0x98>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001036:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001048:	2307      	movs	r3, #7
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4809      	ldr	r0, [pc, #36]	; (8001078 <HAL_UART_MspInit+0x9c>)
 8001054:	f000 fd0a 	bl	8001a6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	2025      	movs	r0, #37	; 0x25
 800105e:	f000 fc3c 	bl	80018da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001062:	2025      	movs	r0, #37	; 0x25
 8001064:	f000 fc55 	bl	8001912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001068:	bf00      	nop
 800106a:	3728      	adds	r7, #40	; 0x28
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40011000 	.word	0x40011000
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001082:	490e      	ldr	r1, [pc, #56]	; (80010bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001098:	4c0b      	ldr	r4, [pc, #44]	; (80010c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a6:	f7ff fef1 	bl	8000e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010aa:	f003 fae7 	bl	800467c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fb31 	bl	8000714 <main>
  bx  lr    
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80010c0:	08005eb8 	.word	0x08005eb8
  ldr r2, =_sbss
 80010c4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80010c8:	20000608 	.word	0x20000608

080010cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>

080010ce <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af04      	add	r7, sp, #16
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	2301      	movs	r3, #1
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	2200      	movs	r2, #0
 80010f8:	2178      	movs	r1, #120	; 0x78
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <ssd1306_WriteCommand+0x2c>)
 80010fc:	f000 ffb0 	bl	8002060 <HAL_I2C_Mem_Write>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000098 	.word	0x20000098

0800110c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af04      	add	r7, sp, #16
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b29b      	uxth	r3, r3
 800111a:	f04f 32ff 	mov.w	r2, #4294967295
 800111e:	9202      	str	r2, [sp, #8]
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2301      	movs	r3, #1
 8001128:	2240      	movs	r2, #64	; 0x40
 800112a:	2178      	movs	r1, #120	; 0x78
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <ssd1306_WriteData+0x30>)
 800112e:	f000 ff97 	bl	8002060 <HAL_I2C_Mem_Write>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000098 	.word	0x20000098

08001140 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001144:	f7ff ffc3 	bl	80010ce <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001148:	2064      	movs	r0, #100	; 0x64
 800114a:	f000 fac7 	bl	80016dc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800114e:	2000      	movs	r0, #0
 8001150:	f000 fa34 	bl	80015bc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001154:	2020      	movs	r0, #32
 8001156:	f7ff ffc1 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff ffbe 	bl	80010dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001160:	20b0      	movs	r0, #176	; 0xb0
 8001162:	f7ff ffbb 	bl	80010dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001166:	20c8      	movs	r0, #200	; 0xc8
 8001168:	f7ff ffb8 	bl	80010dc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff ffb5 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001172:	2010      	movs	r0, #16
 8001174:	f7ff ffb2 	bl	80010dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001178:	2040      	movs	r0, #64	; 0x40
 800117a:	f7ff ffaf 	bl	80010dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800117e:	20ff      	movs	r0, #255	; 0xff
 8001180:	f000 fa09 	bl	8001596 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001184:	20a1      	movs	r0, #161	; 0xa1
 8001186:	f7ff ffa9 	bl	80010dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800118a:	20a6      	movs	r0, #166	; 0xa6
 800118c:	f7ff ffa6 	bl	80010dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001190:	20a8      	movs	r0, #168	; 0xa8
 8001192:	f7ff ffa3 	bl	80010dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001196:	203f      	movs	r0, #63	; 0x3f
 8001198:	f7ff ffa0 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800119c:	20a4      	movs	r0, #164	; 0xa4
 800119e:	f7ff ff9d 	bl	80010dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80011a2:	20d3      	movs	r0, #211	; 0xd3
 80011a4:	f7ff ff9a 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff ff97 	bl	80010dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80011ae:	20d5      	movs	r0, #213	; 0xd5
 80011b0:	f7ff ff94 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80011b4:	20f0      	movs	r0, #240	; 0xf0
 80011b6:	f7ff ff91 	bl	80010dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80011ba:	20d9      	movs	r0, #217	; 0xd9
 80011bc:	f7ff ff8e 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80011c0:	2022      	movs	r0, #34	; 0x22
 80011c2:	f7ff ff8b 	bl	80010dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80011c6:	20da      	movs	r0, #218	; 0xda
 80011c8:	f7ff ff88 	bl	80010dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80011cc:	2012      	movs	r0, #18
 80011ce:	f7ff ff85 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80011d2:	20db      	movs	r0, #219	; 0xdb
 80011d4:	f7ff ff82 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80011d8:	2020      	movs	r0, #32
 80011da:	f7ff ff7f 	bl	80010dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80011de:	208d      	movs	r0, #141	; 0x8d
 80011e0:	f7ff ff7c 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80011e4:	2014      	movs	r0, #20
 80011e6:	f7ff ff79 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80011ea:	2001      	movs	r0, #1
 80011ec:	f000 f9e6 	bl	80015bc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f000 f80f 	bl	8001214 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80011f6:	f000 f831 	bl	800125c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <ssd1306_Init+0xd0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <ssd1306_Init+0xd0>)
 8001202:	2200      	movs	r2, #0
 8001204:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001206:	4b02      	ldr	r3, [pc, #8]	; (8001210 <ssd1306_Init+0xd0>)
 8001208:	2201      	movs	r2, #1
 800120a:	711a      	strb	r2, [r3, #4]
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200005ec 	.word	0x200005ec

08001214 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	e00d      	b.n	8001240 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <ssd1306_Fill+0x1a>
 800122a:	2100      	movs	r1, #0
 800122c:	e000      	b.n	8001230 <ssd1306_Fill+0x1c>
 800122e:	21ff      	movs	r1, #255	; 0xff
 8001230:	4a09      	ldr	r2, [pc, #36]	; (8001258 <ssd1306_Fill+0x44>)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4413      	add	r3, r2
 8001236:	460a      	mov	r2, r1
 8001238:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3301      	adds	r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001246:	d3ed      	bcc.n	8001224 <ssd1306_Fill+0x10>
    }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	200001ec 	.word	0x200001ec

0800125c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001262:	2300      	movs	r3, #0
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	e016      	b.n	8001296 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	3b50      	subs	r3, #80	; 0x50
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff34 	bl	80010dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff ff31 	bl	80010dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800127a:	2010      	movs	r0, #16
 800127c:	f7ff ff2e 	bl	80010dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	01db      	lsls	r3, r3, #7
 8001284:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <ssd1306_UpdateScreen+0x4c>)
 8001286:	4413      	add	r3, r2
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff3e 	bl	800110c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	3301      	adds	r3, #1
 8001294:	71fb      	strb	r3, [r7, #7]
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b07      	cmp	r3, #7
 800129a:	d9e5      	bls.n	8001268 <ssd1306_UpdateScreen+0xc>
    }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200001ec 	.word	0x200001ec

080012ac <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	460b      	mov	r3, r1
 80012b8:	71bb      	strb	r3, [r7, #6]
 80012ba:	4613      	mov	r3, r2
 80012bc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db3d      	blt.n	8001342 <ssd1306_DrawPixel+0x96>
 80012c6:	79bb      	ldrb	r3, [r7, #6]
 80012c8:	2b3f      	cmp	r3, #63	; 0x3f
 80012ca:	d83a      	bhi.n	8001342 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80012cc:	797b      	ldrb	r3, [r7, #5]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d11a      	bne.n	8001308 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012d2:	79fa      	ldrb	r2, [r7, #7]
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	b2d8      	uxtb	r0, r3
 80012da:	4603      	mov	r3, r0
 80012dc:	01db      	lsls	r3, r3, #7
 80012de:	4413      	add	r3, r2
 80012e0:	4a1b      	ldr	r2, [pc, #108]	; (8001350 <ssd1306_DrawPixel+0xa4>)
 80012e2:	5cd3      	ldrb	r3, [r2, r3]
 80012e4:	b25a      	sxtb	r2, r3
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	2101      	movs	r1, #1
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b259      	sxtb	r1, r3
 80012f8:	79fa      	ldrb	r2, [r7, #7]
 80012fa:	4603      	mov	r3, r0
 80012fc:	01db      	lsls	r3, r3, #7
 80012fe:	4413      	add	r3, r2
 8001300:	b2c9      	uxtb	r1, r1
 8001302:	4a13      	ldr	r2, [pc, #76]	; (8001350 <ssd1306_DrawPixel+0xa4>)
 8001304:	54d1      	strb	r1, [r2, r3]
 8001306:	e01d      	b.n	8001344 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001308:	79fa      	ldrb	r2, [r7, #7]
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	08db      	lsrs	r3, r3, #3
 800130e:	b2d8      	uxtb	r0, r3
 8001310:	4603      	mov	r3, r0
 8001312:	01db      	lsls	r3, r3, #7
 8001314:	4413      	add	r3, r2
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <ssd1306_DrawPixel+0xa4>)
 8001318:	5cd3      	ldrb	r3, [r2, r3]
 800131a:	b25a      	sxtb	r2, r3
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	2101      	movs	r1, #1
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	b25b      	sxtb	r3, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	b25b      	sxtb	r3, r3
 800132e:	4013      	ands	r3, r2
 8001330:	b259      	sxtb	r1, r3
 8001332:	79fa      	ldrb	r2, [r7, #7]
 8001334:	4603      	mov	r3, r0
 8001336:	01db      	lsls	r3, r3, #7
 8001338:	4413      	add	r3, r2
 800133a:	b2c9      	uxtb	r1, r1
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <ssd1306_DrawPixel+0xa4>)
 800133e:	54d1      	strb	r1, [r2, r3]
 8001340:	e000      	b.n	8001344 <ssd1306_DrawPixel+0x98>
        return;
 8001342:	bf00      	nop
    }
}
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	200001ec 	.word	0x200001ec

08001354 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	4604      	mov	r4, r0
 800135c:	1d38      	adds	r0, r7, #4
 800135e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001362:	461a      	mov	r2, r3
 8001364:	4623      	mov	r3, r4
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	4613      	mov	r3, r2
 800136a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2b1f      	cmp	r3, #31
 8001370:	d902      	bls.n	8001378 <ssd1306_WriteChar+0x24>
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	2b7e      	cmp	r3, #126	; 0x7e
 8001376:	d901      	bls.n	800137c <ssd1306_WriteChar+0x28>
        return 0;
 8001378:	2300      	movs	r3, #0
 800137a:	e06d      	b.n	8001458 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800137c:	4b38      	ldr	r3, [pc, #224]	; (8001460 <ssd1306_WriteChar+0x10c>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	793b      	ldrb	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	2b80      	cmp	r3, #128	; 0x80
 8001388:	dc06      	bgt.n	8001398 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800138a:	4b35      	ldr	r3, [pc, #212]	; (8001460 <ssd1306_WriteChar+0x10c>)
 800138c:	885b      	ldrh	r3, [r3, #2]
 800138e:	461a      	mov	r2, r3
 8001390:	797b      	ldrb	r3, [r7, #5]
 8001392:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001394:	2b40      	cmp	r3, #64	; 0x40
 8001396:	dd01      	ble.n	800139c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001398:	2300      	movs	r3, #0
 800139a:	e05d      	b.n	8001458 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	e04c      	b.n	800143c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	3b20      	subs	r3, #32
 80013a8:	7979      	ldrb	r1, [r7, #5]
 80013aa:	fb01 f303 	mul.w	r3, r1, r3
 80013ae:	4619      	mov	r1, r3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	440b      	add	r3, r1
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80013bc:	2300      	movs	r3, #0
 80013be:	61bb      	str	r3, [r7, #24]
 80013c0:	e034      	b.n	800142c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d012      	beq.n	80013f8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80013d2:	4b23      	ldr	r3, [pc, #140]	; (8001460 <ssd1306_WriteChar+0x10c>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4413      	add	r3, r2
 80013de:	b2d8      	uxtb	r0, r3
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <ssd1306_WriteChar+0x10c>)
 80013e2:	885b      	ldrh	r3, [r3, #2]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	4413      	add	r3, r2
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	7bba      	ldrb	r2, [r7, #14]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff ff5b 	bl	80012ac <ssd1306_DrawPixel>
 80013f6:	e016      	b.n	8001426 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <ssd1306_WriteChar+0x10c>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	4413      	add	r3, r2
 8001404:	b2d8      	uxtb	r0, r3
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <ssd1306_WriteChar+0x10c>)
 8001408:	885b      	ldrh	r3, [r3, #2]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4413      	add	r3, r2
 8001412:	b2d9      	uxtb	r1, r3
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	2b00      	cmp	r3, #0
 8001418:	bf0c      	ite	eq
 800141a:	2301      	moveq	r3, #1
 800141c:	2300      	movne	r3, #0
 800141e:	b2db      	uxtb	r3, r3
 8001420:	461a      	mov	r2, r3
 8001422:	f7ff ff43 	bl	80012ac <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	3301      	adds	r3, #1
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	793b      	ldrb	r3, [r7, #4]
 800142e:	461a      	mov	r2, r3
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	4293      	cmp	r3, r2
 8001434:	d3c5      	bcc.n	80013c2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3301      	adds	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	797b      	ldrb	r3, [r7, #5]
 800143e:	461a      	mov	r2, r3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	4293      	cmp	r3, r2
 8001444:	d3ad      	bcc.n	80013a2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <ssd1306_WriteChar+0x10c>)
 8001448:	881a      	ldrh	r2, [r3, #0]
 800144a:	793b      	ldrb	r3, [r7, #4]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4413      	add	r3, r2
 8001450:	b29a      	uxth	r2, r3
 8001452:	4b03      	ldr	r3, [pc, #12]	; (8001460 <ssd1306_WriteChar+0x10c>)
 8001454:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3724      	adds	r7, #36	; 0x24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	200005ec 	.word	0x200005ec

08001464 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	1d38      	adds	r0, r7, #4
 800146e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001472:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001474:	e012      	b.n	800149c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	7818      	ldrb	r0, [r3, #0]
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	1d3a      	adds	r2, r7, #4
 800147e:	ca06      	ldmia	r2, {r1, r2}
 8001480:	f7ff ff68 	bl	8001354 <ssd1306_WriteChar>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d002      	beq.n	8001496 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	e008      	b.n	80014a8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3301      	adds	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1e8      	bne.n	8001476 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	781b      	ldrb	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	460a      	mov	r2, r1
 80014ba:	71fb      	strb	r3, [r7, #7]
 80014bc:	4613      	mov	r3, r2
 80014be:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <ssd1306_SetCursor+0x2c>)
 80014c6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80014c8:	79bb      	ldrb	r3, [r7, #6]
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <ssd1306_SetCursor+0x2c>)
 80014ce:	805a      	strh	r2, [r3, #2]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	200005ec 	.word	0x200005ec

080014e0 <ssd1306_DrawBitmap>:
}

//Draw bitmap - ported from the ADAFruit GFX library

void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	603a      	str	r2, [r7, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	460b      	mov	r3, r1
 80014f0:	71bb      	strb	r3, [r7, #6]
 80014f2:	4613      	mov	r3, r2
 80014f4:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80014f6:	797b      	ldrb	r3, [r7, #5]
 80014f8:	3307      	adds	r3, #7
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	da00      	bge.n	8001500 <ssd1306_DrawBitmap+0x20>
 80014fe:	3307      	adds	r3, #7
 8001500:	10db      	asrs	r3, r3, #3
 8001502:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db3e      	blt.n	800158e <ssd1306_DrawBitmap+0xae>
 8001510:	79bb      	ldrb	r3, [r7, #6]
 8001512:	2b3f      	cmp	r3, #63	; 0x3f
 8001514:	d83b      	bhi.n	800158e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001516:	2300      	movs	r3, #0
 8001518:	73bb      	strb	r3, [r7, #14]
 800151a:	e033      	b.n	8001584 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 800151c:	2300      	movs	r3, #0
 800151e:	737b      	strb	r3, [r7, #13]
 8001520:	e026      	b.n	8001570 <ssd1306_DrawBitmap+0x90>
            if (i & 7)
 8001522:	7b7b      	ldrb	r3, [r7, #13]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	e00d      	b.n	8001550 <ssd1306_DrawBitmap+0x70>
            else
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001534:	7bbb      	ldrb	r3, [r7, #14]
 8001536:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800153a:	fb02 f303 	mul.w	r3, r2, r3
 800153e:	7b7a      	ldrb	r2, [r7, #13]
 8001540:	08d2      	lsrs	r2, r2, #3
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	4413      	add	r3, r2
 8001546:	461a      	mov	r2, r3
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	4413      	add	r3, r2
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	73fb      	strb	r3, [r7, #15]
            if (byte & 0x80)
 8001550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	da08      	bge.n	800156a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001558:	79fa      	ldrb	r2, [r7, #7]
 800155a:	7b7b      	ldrb	r3, [r7, #13]
 800155c:	4413      	add	r3, r2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	7f3a      	ldrb	r2, [r7, #28]
 8001562:	79b9      	ldrb	r1, [r7, #6]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fea1 	bl	80012ac <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800156a:	7b7b      	ldrb	r3, [r7, #13]
 800156c:	3301      	adds	r3, #1
 800156e:	737b      	strb	r3, [r7, #13]
 8001570:	7b7a      	ldrb	r2, [r7, #13]
 8001572:	797b      	ldrb	r3, [r7, #5]
 8001574:	429a      	cmp	r2, r3
 8001576:	d3d4      	bcc.n	8001522 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001578:	7bbb      	ldrb	r3, [r7, #14]
 800157a:	3301      	adds	r3, #1
 800157c:	73bb      	strb	r3, [r7, #14]
 800157e:	79bb      	ldrb	r3, [r7, #6]
 8001580:	3301      	adds	r3, #1
 8001582:	71bb      	strb	r3, [r7, #6]
 8001584:	7bba      	ldrb	r2, [r7, #14]
 8001586:	7e3b      	ldrb	r3, [r7, #24]
 8001588:	429a      	cmp	r2, r3
 800158a:	d3c7      	bcc.n	800151c <ssd1306_DrawBitmap+0x3c>
        }
    }
    return;
 800158c:	e000      	b.n	8001590 <ssd1306_DrawBitmap+0xb0>
        return;
 800158e:	bf00      	nop
}
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80015a0:	2381      	movs	r3, #129	; 0x81
 80015a2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fd98 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fd94 	bl	80010dc <ssd1306_WriteCommand>
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80015cc:	23af      	movs	r3, #175	; 0xaf
 80015ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <ssd1306_SetDisplayOn+0x38>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	715a      	strb	r2, [r3, #5]
 80015d6:	e004      	b.n	80015e2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80015d8:	23ae      	movs	r3, #174	; 0xae
 80015da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <ssd1306_SetDisplayOn+0x38>)
 80015de:	2200      	movs	r2, #0
 80015e0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fd79 	bl	80010dc <ssd1306_WriteCommand>
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200005ec 	.word	0x200005ec

080015f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <HAL_Init+0x40>)
 8001602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_Init+0x40>)
 800160e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_Init+0x40>)
 800161a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001620:	2003      	movs	r0, #3
 8001622:	f000 f94f 	bl	80018c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001626:	200f      	movs	r0, #15
 8001628:	f000 f808 	bl	800163c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800162c:	f7ff fb9c 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023c00 	.word	0x40023c00

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_InitTick+0x54>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x58>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f967 	bl	800192e <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e00e      	b.n	8001688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d80a      	bhi.n	8001686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f000 f92f 	bl	80018da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4a06      	ldr	r2, [pc, #24]	; (8001698 <HAL_InitTick+0x5c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000004 	.word	0x20000004
 8001694:	20000014 	.word	0x20000014
 8001698:	20000010 	.word	0x20000010

0800169c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_IncTick+0x20>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x24>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_IncTick+0x24>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000014 	.word	0x20000014
 80016c0:	200005f4 	.word	0x200005f4

080016c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <HAL_GetTick+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	200005f4 	.word	0x200005f4

080016dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff ffee 	bl	80016c4 <HAL_GetTick>
 80016e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d005      	beq.n	8001702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_Delay+0x44>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001702:	bf00      	nop
 8001704:	f7ff ffde 	bl	80016c4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d8f7      	bhi.n	8001704 <HAL_Delay+0x28>
  {
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000014 	.word	0x20000014

08001724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800174c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001756:	4a04      	ldr	r2, [pc, #16]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	60d3      	str	r3, [r2, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <__NVIC_GetPriorityGrouping+0x18>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	f003 0307 	and.w	r3, r3, #7
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	2b00      	cmp	r3, #0
 8001798:	db0b      	blt.n	80017b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	f003 021f 	and.w	r2, r3, #31
 80017a0:	4907      	ldr	r1, [pc, #28]	; (80017c0 <__NVIC_EnableIRQ+0x38>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	2001      	movs	r0, #1
 80017aa:	fa00 f202 	lsl.w	r2, r0, r2
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000e100 	.word	0xe000e100

080017c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	db0a      	blt.n	80017ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	490c      	ldr	r1, [pc, #48]	; (8001810 <__NVIC_SetPriority+0x4c>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	0112      	lsls	r2, r2, #4
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	440b      	add	r3, r1
 80017e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ec:	e00a      	b.n	8001804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4908      	ldr	r1, [pc, #32]	; (8001814 <__NVIC_SetPriority+0x50>)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	3b04      	subs	r3, #4
 80017fc:	0112      	lsls	r2, r2, #4
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	440b      	add	r3, r1
 8001802:	761a      	strb	r2, [r3, #24]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001818:	b480      	push	{r7}
 800181a:	b089      	sub	sp, #36	; 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f1c3 0307 	rsb	r3, r3, #7
 8001832:	2b04      	cmp	r3, #4
 8001834:	bf28      	it	cs
 8001836:	2304      	movcs	r3, #4
 8001838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3304      	adds	r3, #4
 800183e:	2b06      	cmp	r3, #6
 8001840:	d902      	bls.n	8001848 <NVIC_EncodePriority+0x30>
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3b03      	subs	r3, #3
 8001846:	e000      	b.n	800184a <NVIC_EncodePriority+0x32>
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	f04f 32ff 	mov.w	r2, #4294967295
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	401a      	ands	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001860:	f04f 31ff 	mov.w	r1, #4294967295
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	43d9      	mvns	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	4313      	orrs	r3, r2
         );
}
 8001872:	4618      	mov	r0, r3
 8001874:	3724      	adds	r7, #36	; 0x24
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3b01      	subs	r3, #1
 800188c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001890:	d301      	bcc.n	8001896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001892:	2301      	movs	r3, #1
 8001894:	e00f      	b.n	80018b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <SysTick_Config+0x40>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189e:	210f      	movs	r1, #15
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f7ff ff8e 	bl	80017c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <SysTick_Config+0x40>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ae:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <SysTick_Config+0x40>)
 80018b0:	2207      	movs	r2, #7
 80018b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	e000e010 	.word	0xe000e010

080018c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ff29 	bl	8001724 <__NVIC_SetPriorityGrouping>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ec:	f7ff ff3e 	bl	800176c <__NVIC_GetPriorityGrouping>
 80018f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	6978      	ldr	r0, [r7, #20]
 80018f8:	f7ff ff8e 	bl	8001818 <NVIC_EncodePriority>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff5d 	bl	80017c4 <__NVIC_SetPriority>
}
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff31 	bl	8001788 <__NVIC_EnableIRQ>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffa2 	bl	8001880 <SysTick_Config>
 800193c:	4603      	mov	r3, r0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff feb6 	bl	80016c4 <HAL_GetTick>
 8001958:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d008      	beq.n	8001978 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e052      	b.n	8001a1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0216 	bic.w	r2, r2, #22
 8001986:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001996:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	2b00      	cmp	r3, #0
 800199e:	d103      	bne.n	80019a8 <HAL_DMA_Abort+0x62>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d007      	beq.n	80019b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0208 	bic.w	r2, r2, #8
 80019b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c8:	e013      	b.n	80019f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ca:	f7ff fe7b 	bl	80016c4 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	d90c      	bls.n	80019f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2220      	movs	r2, #32
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2203      	movs	r2, #3
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e015      	b.n	8001a1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1e4      	bne.n	80019ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a04:	223f      	movs	r2, #63	; 0x3f
 8001a06:	409a      	lsls	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d004      	beq.n	8001a44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2280      	movs	r2, #128	; 0x80
 8001a3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e00c      	b.n	8001a5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2205      	movs	r2, #5
 8001a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	e159      	b.n	8001d3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f040 8148 	bne.w	8001d36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d005      	beq.n	8001abe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d130      	bne.n	8001b20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	2203      	movs	r2, #3
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af4:	2201      	movs	r2, #1
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 0201 	and.w	r2, r3, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d017      	beq.n	8001b5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d123      	bne.n	8001bb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	08da      	lsrs	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3208      	adds	r2, #8
 8001b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	220f      	movs	r2, #15
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	08da      	lsrs	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3208      	adds	r2, #8
 8001baa:	69b9      	ldr	r1, [r7, #24]
 8001bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0203 	and.w	r2, r3, #3
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80a2 	beq.w	8001d36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b57      	ldr	r3, [pc, #348]	; (8001d54 <HAL_GPIO_Init+0x2e8>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a56      	ldr	r2, [pc, #344]	; (8001d54 <HAL_GPIO_Init+0x2e8>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b54      	ldr	r3, [pc, #336]	; (8001d54 <HAL_GPIO_Init+0x2e8>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c0e:	4a52      	ldr	r2, [pc, #328]	; (8001d58 <HAL_GPIO_Init+0x2ec>)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	3302      	adds	r3, #2
 8001c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	220f      	movs	r2, #15
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a49      	ldr	r2, [pc, #292]	; (8001d5c <HAL_GPIO_Init+0x2f0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d019      	beq.n	8001c6e <HAL_GPIO_Init+0x202>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a48      	ldr	r2, [pc, #288]	; (8001d60 <HAL_GPIO_Init+0x2f4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_GPIO_Init+0x1fe>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a47      	ldr	r2, [pc, #284]	; (8001d64 <HAL_GPIO_Init+0x2f8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00d      	beq.n	8001c66 <HAL_GPIO_Init+0x1fa>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a46      	ldr	r2, [pc, #280]	; (8001d68 <HAL_GPIO_Init+0x2fc>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d007      	beq.n	8001c62 <HAL_GPIO_Init+0x1f6>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a45      	ldr	r2, [pc, #276]	; (8001d6c <HAL_GPIO_Init+0x300>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d101      	bne.n	8001c5e <HAL_GPIO_Init+0x1f2>
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	e008      	b.n	8001c70 <HAL_GPIO_Init+0x204>
 8001c5e:	2307      	movs	r3, #7
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x204>
 8001c62:	2303      	movs	r3, #3
 8001c64:	e004      	b.n	8001c70 <HAL_GPIO_Init+0x204>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e002      	b.n	8001c70 <HAL_GPIO_Init+0x204>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_GPIO_Init+0x204>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	f002 0203 	and.w	r2, r2, #3
 8001c76:	0092      	lsls	r2, r2, #2
 8001c78:	4093      	lsls	r3, r2
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c80:	4935      	ldr	r1, [pc, #212]	; (8001d58 <HAL_GPIO_Init+0x2ec>)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c8e:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <HAL_GPIO_Init+0x304>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cb2:	4a2f      	ldr	r2, [pc, #188]	; (8001d70 <HAL_GPIO_Init+0x304>)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_GPIO_Init+0x304>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cdc:	4a24      	ldr	r2, [pc, #144]	; (8001d70 <HAL_GPIO_Init+0x304>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ce2:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <HAL_GPIO_Init+0x304>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d06:	4a1a      	ldr	r2, [pc, #104]	; (8001d70 <HAL_GPIO_Init+0x304>)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <HAL_GPIO_Init+0x304>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d30:	4a0f      	ldr	r2, [pc, #60]	; (8001d70 <HAL_GPIO_Init+0x304>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	2b0f      	cmp	r3, #15
 8001d40:	f67f aea2 	bls.w	8001a88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40013800 	.word	0x40013800
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40020400 	.word	0x40020400
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40020c00 	.word	0x40020c00
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40013c00 	.word	0x40013c00

08001d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	887b      	ldrh	r3, [r7, #2]
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	e001      	b.n	8001d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
 8001db0:	4613      	mov	r3, r2
 8001db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db4:	787b      	ldrb	r3, [r7, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dc0:	e003      	b.n	8001dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	041a      	lsls	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	619a      	str	r2, [r3, #24]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e12b      	b.n	8002042 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d106      	bne.n	8001e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7fe fc40 	bl	8000684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2224      	movs	r2, #36	; 0x24
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e3c:	f001 f858 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8001e40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4a81      	ldr	r2, [pc, #516]	; (800204c <HAL_I2C_Init+0x274>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d807      	bhi.n	8001e5c <HAL_I2C_Init+0x84>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4a80      	ldr	r2, [pc, #512]	; (8002050 <HAL_I2C_Init+0x278>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	bf94      	ite	ls
 8001e54:	2301      	movls	r3, #1
 8001e56:	2300      	movhi	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	e006      	b.n	8001e6a <HAL_I2C_Init+0x92>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4a7d      	ldr	r2, [pc, #500]	; (8002054 <HAL_I2C_Init+0x27c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	bf94      	ite	ls
 8001e64:	2301      	movls	r3, #1
 8001e66:	2300      	movhi	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0e7      	b.n	8002042 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4a78      	ldr	r2, [pc, #480]	; (8002058 <HAL_I2C_Init+0x280>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0c9b      	lsrs	r3, r3, #18
 8001e7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4a6a      	ldr	r2, [pc, #424]	; (800204c <HAL_I2C_Init+0x274>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d802      	bhi.n	8001eac <HAL_I2C_Init+0xd4>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	e009      	b.n	8001ec0 <HAL_I2C_Init+0xe8>
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eb2:	fb02 f303 	mul.w	r3, r2, r3
 8001eb6:	4a69      	ldr	r2, [pc, #420]	; (800205c <HAL_I2C_Init+0x284>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	099b      	lsrs	r3, r3, #6
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ed2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	495c      	ldr	r1, [pc, #368]	; (800204c <HAL_I2C_Init+0x274>)
 8001edc:	428b      	cmp	r3, r1
 8001ede:	d819      	bhi.n	8001f14 <HAL_I2C_Init+0x13c>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1e59      	subs	r1, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eee:	1c59      	adds	r1, r3, #1
 8001ef0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ef4:	400b      	ands	r3, r1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <HAL_I2C_Init+0x138>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1e59      	subs	r1, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0e:	e051      	b.n	8001fb4 <HAL_I2C_Init+0x1dc>
 8001f10:	2304      	movs	r3, #4
 8001f12:	e04f      	b.n	8001fb4 <HAL_I2C_Init+0x1dc>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d111      	bne.n	8001f40 <HAL_I2C_Init+0x168>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e58      	subs	r0, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	440b      	add	r3, r1
 8001f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	e012      	b.n	8001f66 <HAL_I2C_Init+0x18e>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1e58      	subs	r0, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	0099      	lsls	r1, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f56:	3301      	adds	r3, #1
 8001f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf0c      	ite	eq
 8001f60:	2301      	moveq	r3, #1
 8001f62:	2300      	movne	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_Init+0x196>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e022      	b.n	8001fb4 <HAL_I2C_Init+0x1dc>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10e      	bne.n	8001f94 <HAL_I2C_Init+0x1bc>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1e58      	subs	r0, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6859      	ldr	r1, [r3, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	440b      	add	r3, r1
 8001f84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f92:	e00f      	b.n	8001fb4 <HAL_I2C_Init+0x1dc>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1e58      	subs	r0, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	0099      	lsls	r1, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001faa:	3301      	adds	r3, #1
 8001fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	6809      	ldr	r1, [r1, #0]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69da      	ldr	r2, [r3, #28]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6911      	ldr	r1, [r2, #16]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68d2      	ldr	r2, [r2, #12]
 8001fee:	4311      	orrs	r1, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	000186a0 	.word	0x000186a0
 8002050:	001e847f 	.word	0x001e847f
 8002054:	003d08ff 	.word	0x003d08ff
 8002058:	431bde83 	.word	0x431bde83
 800205c:	10624dd3 	.word	0x10624dd3

08002060 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	4608      	mov	r0, r1
 800206a:	4611      	mov	r1, r2
 800206c:	461a      	mov	r2, r3
 800206e:	4603      	mov	r3, r0
 8002070:	817b      	strh	r3, [r7, #10]
 8002072:	460b      	mov	r3, r1
 8002074:	813b      	strh	r3, [r7, #8]
 8002076:	4613      	mov	r3, r2
 8002078:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800207a:	f7ff fb23 	bl	80016c4 <HAL_GetTick>
 800207e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b20      	cmp	r3, #32
 800208a:	f040 80d9 	bne.w	8002240 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2319      	movs	r3, #25
 8002094:	2201      	movs	r2, #1
 8002096:	496d      	ldr	r1, [pc, #436]	; (800224c <HAL_I2C_Mem_Write+0x1ec>)
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 f971 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80020a4:	2302      	movs	r3, #2
 80020a6:	e0cc      	b.n	8002242 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_I2C_Mem_Write+0x56>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e0c5      	b.n	8002242 <HAL_I2C_Mem_Write+0x1e2>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d007      	beq.n	80020dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2221      	movs	r2, #33	; 0x21
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2240      	movs	r2, #64	; 0x40
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a3a      	ldr	r2, [r7, #32]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800210c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4a4d      	ldr	r2, [pc, #308]	; (8002250 <HAL_I2C_Mem_Write+0x1f0>)
 800211c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800211e:	88f8      	ldrh	r0, [r7, #6]
 8002120:	893a      	ldrh	r2, [r7, #8]
 8002122:	8979      	ldrh	r1, [r7, #10]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	4603      	mov	r3, r0
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f890 	bl	8002254 <I2C_RequestMemoryWrite>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d052      	beq.n	80021e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e081      	b.n	8002242 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f9f2 	bl	800252c <I2C_WaitOnTXEFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00d      	beq.n	800216a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	2b04      	cmp	r3, #4
 8002154:	d107      	bne.n	8002166 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002164:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e06b      	b.n	8002242 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d11b      	bne.n	80021e0 <HAL_I2C_Mem_Write+0x180>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d017      	beq.n	80021e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	781a      	ldrb	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1aa      	bne.n	800213e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f9de 	bl	80025ae <I2C_WaitOnBTFFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00d      	beq.n	8002214 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d107      	bne.n	8002210 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e016      	b.n	8002242 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	e000      	b.n	8002242 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002240:	2302      	movs	r3, #2
  }
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	00100002 	.word	0x00100002
 8002250:	ffff0000 	.word	0xffff0000

08002254 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af02      	add	r7, sp, #8
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	4608      	mov	r0, r1
 800225e:	4611      	mov	r1, r2
 8002260:	461a      	mov	r2, r3
 8002262:	4603      	mov	r3, r0
 8002264:	817b      	strh	r3, [r7, #10]
 8002266:	460b      	mov	r3, r1
 8002268:	813b      	strh	r3, [r7, #8]
 800226a:	4613      	mov	r3, r2
 800226c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800227c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	2200      	movs	r2, #0
 8002286:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f878 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00d      	beq.n	80022b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a4:	d103      	bne.n	80022ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e05f      	b.n	8002372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022b2:	897b      	ldrh	r3, [r7, #10]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	6a3a      	ldr	r2, [r7, #32]
 80022c6:	492d      	ldr	r1, [pc, #180]	; (800237c <I2C_RequestMemoryWrite+0x128>)
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f8b0 	bl	800242e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e04c      	b.n	8002372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f0:	6a39      	ldr	r1, [r7, #32]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f91a 	bl	800252c <I2C_WaitOnTXEFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00d      	beq.n	800231a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b04      	cmp	r3, #4
 8002304:	d107      	bne.n	8002316 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002314:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e02b      	b.n	8002372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d105      	bne.n	800232c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002320:	893b      	ldrh	r3, [r7, #8]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	611a      	str	r2, [r3, #16]
 800232a:	e021      	b.n	8002370 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800232c:	893b      	ldrh	r3, [r7, #8]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	b29b      	uxth	r3, r3
 8002332:	b2da      	uxtb	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800233a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233c:	6a39      	ldr	r1, [r7, #32]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f8f4 	bl	800252c <I2C_WaitOnTXEFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00d      	beq.n	8002366 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	2b04      	cmp	r3, #4
 8002350:	d107      	bne.n	8002362 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002360:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e005      	b.n	8002372 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002366:	893b      	ldrh	r3, [r7, #8]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	00010002 	.word	0x00010002

08002380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002390:	e025      	b.n	80023de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d021      	beq.n	80023de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239a:	f7ff f993 	bl	80016c4 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d302      	bcc.n	80023b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d116      	bne.n	80023de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f043 0220 	orr.w	r2, r3, #32
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e023      	b.n	8002426 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	0c1b      	lsrs	r3, r3, #16
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d10d      	bne.n	8002404 <I2C_WaitOnFlagUntilTimeout+0x84>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4013      	ands	r3, r2
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	bf0c      	ite	eq
 80023fa:	2301      	moveq	r3, #1
 80023fc:	2300      	movne	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	e00c      	b.n	800241e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4013      	ands	r3, r2
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	bf0c      	ite	eq
 8002416:	2301      	moveq	r3, #1
 8002418:	2300      	movne	r3, #0
 800241a:	b2db      	uxtb	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	429a      	cmp	r2, r3
 8002422:	d0b6      	beq.n	8002392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800243c:	e051      	b.n	80024e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244c:	d123      	bne.n	8002496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002466:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f043 0204 	orr.w	r2, r3, #4
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e046      	b.n	8002524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d021      	beq.n	80024e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249e:	f7ff f911 	bl	80016c4 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d302      	bcc.n	80024b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d116      	bne.n	80024e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f043 0220 	orr.w	r2, r3, #32
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e020      	b.n	8002524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	0c1b      	lsrs	r3, r3, #16
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d10c      	bne.n	8002506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4013      	ands	r3, r2
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf14      	ite	ne
 80024fe:	2301      	movne	r3, #1
 8002500:	2300      	moveq	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	e00b      	b.n	800251e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	43da      	mvns	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	4013      	ands	r3, r2
 8002512:	b29b      	uxth	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	bf14      	ite	ne
 8002518:	2301      	movne	r3, #1
 800251a:	2300      	moveq	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d18d      	bne.n	800243e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002538:	e02d      	b.n	8002596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f878 	bl	8002630 <I2C_IsAcknowledgeFailed>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e02d      	b.n	80025a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d021      	beq.n	8002596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002552:	f7ff f8b7 	bl	80016c4 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	429a      	cmp	r2, r3
 8002560:	d302      	bcc.n	8002568 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d116      	bne.n	8002596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f043 0220 	orr.w	r2, r3, #32
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e007      	b.n	80025a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a0:	2b80      	cmp	r3, #128	; 0x80
 80025a2:	d1ca      	bne.n	800253a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025ba:	e02d      	b.n	8002618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f837 	bl	8002630 <I2C_IsAcknowledgeFailed>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e02d      	b.n	8002628 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d2:	d021      	beq.n	8002618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d4:	f7ff f876 	bl	80016c4 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d302      	bcc.n	80025ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d116      	bne.n	8002618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f043 0220 	orr.w	r2, r3, #32
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e007      	b.n	8002628 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b04      	cmp	r3, #4
 8002624:	d1ca      	bne.n	80025bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002646:	d11b      	bne.n	8002680 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002650:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	f043 0204 	orr.w	r2, r3, #4
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e267      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d075      	beq.n	800279a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ae:	4b88      	ldr	r3, [pc, #544]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d00c      	beq.n	80026d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ba:	4b85      	ldr	r3, [pc, #532]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d112      	bne.n	80026ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c6:	4b82      	ldr	r3, [pc, #520]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d2:	d10b      	bne.n	80026ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	4b7e      	ldr	r3, [pc, #504]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d05b      	beq.n	8002798 <HAL_RCC_OscConfig+0x108>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d157      	bne.n	8002798 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e242      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f4:	d106      	bne.n	8002704 <HAL_RCC_OscConfig+0x74>
 80026f6:	4b76      	ldr	r3, [pc, #472]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a75      	ldr	r2, [pc, #468]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e01d      	b.n	8002740 <HAL_RCC_OscConfig+0xb0>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x98>
 800270e:	4b70      	ldr	r3, [pc, #448]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6f      	ldr	r2, [pc, #444]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 8002714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	4b6d      	ldr	r3, [pc, #436]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a6c      	ldr	r2, [pc, #432]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e00b      	b.n	8002740 <HAL_RCC_OscConfig+0xb0>
 8002728:	4b69      	ldr	r3, [pc, #420]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a68      	ldr	r2, [pc, #416]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 800272e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	4b66      	ldr	r3, [pc, #408]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a65      	ldr	r2, [pc, #404]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 800273a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d013      	beq.n	8002770 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7fe ffbc 	bl	80016c4 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002750:	f7fe ffb8 	bl	80016c4 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e207      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b5b      	ldr	r3, [pc, #364]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0xc0>
 800276e:	e014      	b.n	800279a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7fe ffa8 	bl	80016c4 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002778:	f7fe ffa4 	bl	80016c4 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e1f3      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278a:	4b51      	ldr	r3, [pc, #324]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0xe8>
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d063      	beq.n	800286e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027a6:	4b4a      	ldr	r3, [pc, #296]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00b      	beq.n	80027ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027b2:	4b47      	ldr	r3, [pc, #284]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d11c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027be:	4b44      	ldr	r3, [pc, #272]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d116      	bne.n	80027f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ca:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_RCC_OscConfig+0x152>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d001      	beq.n	80027e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e1c7      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e2:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4937      	ldr	r1, [pc, #220]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f6:	e03a      	b.n	800286e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d020      	beq.n	8002842 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002800:	4b34      	ldr	r3, [pc, #208]	; (80028d4 <HAL_RCC_OscConfig+0x244>)
 8002802:	2201      	movs	r2, #1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe ff5d 	bl	80016c4 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800280e:	f7fe ff59 	bl	80016c4 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e1a8      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002820:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282c:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4925      	ldr	r1, [pc, #148]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 800283c:	4313      	orrs	r3, r2
 800283e:	600b      	str	r3, [r1, #0]
 8002840:	e015      	b.n	800286e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <HAL_RCC_OscConfig+0x244>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7fe ff3c 	bl	80016c4 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002850:	f7fe ff38 	bl	80016c4 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e187      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002862:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d036      	beq.n	80028e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d016      	beq.n	80028b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <HAL_RCC_OscConfig+0x248>)
 8002884:	2201      	movs	r2, #1
 8002886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002888:	f7fe ff1c 	bl	80016c4 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002890:	f7fe ff18 	bl	80016c4 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e167      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a2:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80028a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0x200>
 80028ae:	e01b      	b.n	80028e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_OscConfig+0x248>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b6:	f7fe ff05 	bl	80016c4 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028bc:	e00e      	b.n	80028dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028be:	f7fe ff01 	bl	80016c4 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d907      	bls.n	80028dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e150      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
 80028d0:	40023800 	.word	0x40023800
 80028d4:	42470000 	.word	0x42470000
 80028d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028dc:	4b88      	ldr	r3, [pc, #544]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 80028de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1ea      	bne.n	80028be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 8097 	beq.w	8002a24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fa:	4b81      	ldr	r3, [pc, #516]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10f      	bne.n	8002926 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	4b7d      	ldr	r3, [pc, #500]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	4a7c      	ldr	r2, [pc, #496]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002914:	6413      	str	r3, [r2, #64]	; 0x40
 8002916:	4b7a      	ldr	r3, [pc, #488]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002922:	2301      	movs	r3, #1
 8002924:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002926:	4b77      	ldr	r3, [pc, #476]	; (8002b04 <HAL_RCC_OscConfig+0x474>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d118      	bne.n	8002964 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002932:	4b74      	ldr	r3, [pc, #464]	; (8002b04 <HAL_RCC_OscConfig+0x474>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a73      	ldr	r2, [pc, #460]	; (8002b04 <HAL_RCC_OscConfig+0x474>)
 8002938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293e:	f7fe fec1 	bl	80016c4 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002946:	f7fe febd 	bl	80016c4 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e10c      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	4b6a      	ldr	r3, [pc, #424]	; (8002b04 <HAL_RCC_OscConfig+0x474>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d106      	bne.n	800297a <HAL_RCC_OscConfig+0x2ea>
 800296c:	4b64      	ldr	r3, [pc, #400]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	4a63      	ldr	r2, [pc, #396]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6713      	str	r3, [r2, #112]	; 0x70
 8002978:	e01c      	b.n	80029b4 <HAL_RCC_OscConfig+0x324>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b05      	cmp	r3, #5
 8002980:	d10c      	bne.n	800299c <HAL_RCC_OscConfig+0x30c>
 8002982:	4b5f      	ldr	r3, [pc, #380]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a5e      	ldr	r2, [pc, #376]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002988:	f043 0304 	orr.w	r3, r3, #4
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
 800298e:	4b5c      	ldr	r3, [pc, #368]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	4a5b      	ldr	r2, [pc, #364]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6713      	str	r3, [r2, #112]	; 0x70
 800299a:	e00b      	b.n	80029b4 <HAL_RCC_OscConfig+0x324>
 800299c:	4b58      	ldr	r3, [pc, #352]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4a57      	ldr	r2, [pc, #348]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	6713      	str	r3, [r2, #112]	; 0x70
 80029a8:	4b55      	ldr	r3, [pc, #340]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	4a54      	ldr	r2, [pc, #336]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 80029ae:	f023 0304 	bic.w	r3, r3, #4
 80029b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d015      	beq.n	80029e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7fe fe82 	bl	80016c4 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c2:	e00a      	b.n	80029da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c4:	f7fe fe7e 	bl	80016c4 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e0cb      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029da:	4b49      	ldr	r3, [pc, #292]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0ee      	beq.n	80029c4 <HAL_RCC_OscConfig+0x334>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e8:	f7fe fe6c 	bl	80016c4 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f0:	f7fe fe68 	bl	80016c4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e0b5      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a06:	4b3e      	ldr	r3, [pc, #248]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1ee      	bne.n	80029f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d105      	bne.n	8002a24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a18:	4b39      	ldr	r3, [pc, #228]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	4a38      	ldr	r2, [pc, #224]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80a1 	beq.w	8002b70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a2e:	4b34      	ldr	r3, [pc, #208]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d05c      	beq.n	8002af4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d141      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a42:	4b31      	ldr	r3, [pc, #196]	; (8002b08 <HAL_RCC_OscConfig+0x478>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe fe3c 	bl	80016c4 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fe fe38 	bl	80016c4 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e087      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69da      	ldr	r2, [r3, #28]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	019b      	lsls	r3, r3, #6
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	085b      	lsrs	r3, r3, #1
 8002a86:	3b01      	subs	r3, #1
 8002a88:	041b      	lsls	r3, r3, #16
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	061b      	lsls	r3, r3, #24
 8002a92:	491b      	ldr	r1, [pc, #108]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_RCC_OscConfig+0x478>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9e:	f7fe fe11 	bl	80016c4 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa6:	f7fe fe0d 	bl	80016c4 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e05c      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab8:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x416>
 8002ac4:	e054      	b.n	8002b70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <HAL_RCC_OscConfig+0x478>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fe fdfa 	bl	80016c4 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe fdf6 	bl	80016c4 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e045      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x444>
 8002af2:	e03d      	b.n	8002b70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d107      	bne.n	8002b0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e038      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40007000 	.word	0x40007000
 8002b08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_RCC_OscConfig+0x4ec>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d028      	beq.n	8002b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d121      	bne.n	8002b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d11a      	bne.n	8002b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d111      	bne.n	8002b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	3b01      	subs	r3, #1
 8002b56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d107      	bne.n	8002b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800

08002b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0cc      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b94:	4b68      	ldr	r3, [pc, #416]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d90c      	bls.n	8002bbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b65      	ldr	r3, [pc, #404]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002baa:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0b8      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d020      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bd4:	4b59      	ldr	r3, [pc, #356]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	4a58      	ldr	r2, [pc, #352]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bec:	4b53      	ldr	r3, [pc, #332]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4a52      	ldr	r2, [pc, #328]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf8:	4b50      	ldr	r3, [pc, #320]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	494d      	ldr	r1, [pc, #308]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d044      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1e:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d119      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e07f      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d003      	beq.n	8002c3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3e:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e06f      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4e:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e067      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5e:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f023 0203 	bic.w	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4934      	ldr	r1, [pc, #208]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c70:	f7fe fd28 	bl	80016c4 <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c78:	f7fe fd24 	bl	80016c4 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e04f      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	4b2b      	ldr	r3, [pc, #172]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 020c 	and.w	r2, r3, #12
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d1eb      	bne.n	8002c78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d20c      	bcs.n	8002cc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e032      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4916      	ldr	r1, [pc, #88]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	490e      	ldr	r1, [pc, #56]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d06:	f000 f821 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	490a      	ldr	r1, [pc, #40]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002d18:	5ccb      	ldrb	r3, [r1, r3]
 8002d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1e:	4a09      	ldr	r2, [pc, #36]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_RCC_ClockConfig+0x1c8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fc88 	bl	800163c <HAL_InitTick>

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023c00 	.word	0x40023c00
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	08005100 	.word	0x08005100
 8002d44:	20000004 	.word	0x20000004
 8002d48:	20000010 	.word	0x20000010

08002d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d50:	b090      	sub	sp, #64	; 0x40
 8002d52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	637b      	str	r3, [r7, #52]	; 0x34
 8002d58:	2300      	movs	r3, #0
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d64:	4b59      	ldr	r3, [pc, #356]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d00d      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x40>
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	f200 80a1 	bhi.w	8002eb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x34>
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d003      	beq.n	8002d86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d7e:	e09b      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d80:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d82:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d84:	e09b      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d86:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d8a:	e098      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d8c:	4b4f      	ldr	r3, [pc, #316]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d94:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d96:	4b4d      	ldr	r3, [pc, #308]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d028      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da2:	4b4a      	ldr	r3, [pc, #296]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	099b      	lsrs	r3, r3, #6
 8002da8:	2200      	movs	r2, #0
 8002daa:	623b      	str	r3, [r7, #32]
 8002dac:	627a      	str	r2, [r7, #36]	; 0x24
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002db4:	2100      	movs	r1, #0
 8002db6:	4b47      	ldr	r3, [pc, #284]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002db8:	fb03 f201 	mul.w	r2, r3, r1
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	fb00 f303 	mul.w	r3, r0, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	4a43      	ldr	r2, [pc, #268]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dc6:	fba0 1202 	umull	r1, r2, r0, r2
 8002dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dcc:	460a      	mov	r2, r1
 8002dce:	62ba      	str	r2, [r7, #40]	; 0x28
 8002dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd2:	4413      	add	r3, r2
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd8:	2200      	movs	r2, #0
 8002dda:	61bb      	str	r3, [r7, #24]
 8002ddc:	61fa      	str	r2, [r7, #28]
 8002dde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002de6:	f7fd fa4b 	bl	8000280 <__aeabi_uldivmod>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4613      	mov	r3, r2
 8002df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df2:	e053      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	617a      	str	r2, [r7, #20]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e06:	f04f 0b00 	mov.w	fp, #0
 8002e0a:	4652      	mov	r2, sl
 8002e0c:	465b      	mov	r3, fp
 8002e0e:	f04f 0000 	mov.w	r0, #0
 8002e12:	f04f 0100 	mov.w	r1, #0
 8002e16:	0159      	lsls	r1, r3, #5
 8002e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e1c:	0150      	lsls	r0, r2, #5
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	ebb2 080a 	subs.w	r8, r2, sl
 8002e26:	eb63 090b 	sbc.w	r9, r3, fp
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e3e:	ebb2 0408 	subs.w	r4, r2, r8
 8002e42:	eb63 0509 	sbc.w	r5, r3, r9
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	00eb      	lsls	r3, r5, #3
 8002e50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e54:	00e2      	lsls	r2, r4, #3
 8002e56:	4614      	mov	r4, r2
 8002e58:	461d      	mov	r5, r3
 8002e5a:	eb14 030a 	adds.w	r3, r4, sl
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	eb45 030b 	adc.w	r3, r5, fp
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e72:	4629      	mov	r1, r5
 8002e74:	028b      	lsls	r3, r1, #10
 8002e76:	4621      	mov	r1, r4
 8002e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	028a      	lsls	r2, r1, #10
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e86:	2200      	movs	r2, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	60fa      	str	r2, [r7, #12]
 8002e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e90:	f7fd f9f6 	bl	8000280 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4613      	mov	r3, r2
 8002e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	0c1b      	lsrs	r3, r3, #16
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002eac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eb6:	e002      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002eba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3740      	adds	r7, #64	; 0x40
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	00f42400 	.word	0x00f42400
 8002ed4:	017d7840 	.word	0x017d7840

08002ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <HAL_RCC_GetHCLKFreq+0x14>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000004 	.word	0x20000004

08002ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ef4:	f7ff fff0 	bl	8002ed8 <HAL_RCC_GetHCLKFreq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	0a9b      	lsrs	r3, r3, #10
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4903      	ldr	r1, [pc, #12]	; (8002f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40023800 	.word	0x40023800
 8002f14:	08005110 	.word	0x08005110

08002f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f1c:	f7ff ffdc 	bl	8002ed8 <HAL_RCC_GetHCLKFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	0b5b      	lsrs	r3, r3, #13
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4903      	ldr	r1, [pc, #12]	; (8002f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	08005110 	.word	0x08005110

08002f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e041      	b.n	8002fd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fd ffee 	bl	8000f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f000 f976 	bl	8003270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d001      	beq.n	8002ff8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e03c      	b.n	8003072 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1e      	ldr	r2, [pc, #120]	; (8003080 <HAL_TIM_Base_Start+0xa0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d018      	beq.n	800303c <HAL_TIM_Base_Start+0x5c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003012:	d013      	beq.n	800303c <HAL_TIM_Base_Start+0x5c>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1a      	ldr	r2, [pc, #104]	; (8003084 <HAL_TIM_Base_Start+0xa4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00e      	beq.n	800303c <HAL_TIM_Base_Start+0x5c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a19      	ldr	r2, [pc, #100]	; (8003088 <HAL_TIM_Base_Start+0xa8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d009      	beq.n	800303c <HAL_TIM_Base_Start+0x5c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a17      	ldr	r2, [pc, #92]	; (800308c <HAL_TIM_Base_Start+0xac>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d004      	beq.n	800303c <HAL_TIM_Base_Start+0x5c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a16      	ldr	r2, [pc, #88]	; (8003090 <HAL_TIM_Base_Start+0xb0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d111      	bne.n	8003060 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b06      	cmp	r3, #6
 800304c:	d010      	beq.n	8003070 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305e:	e007      	b.n	8003070 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40010000 	.word	0x40010000
 8003084:	40000400 	.word	0x40000400
 8003088:	40000800 	.word	0x40000800
 800308c:	40000c00 	.word	0x40000c00
 8003090:	40014000 	.word	0x40014000

08003094 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6a1a      	ldr	r2, [r3, #32]
 80030a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10f      	bne.n	80030cc <HAL_TIM_Base_Stop+0x38>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6a1a      	ldr	r2, [r3, #32]
 80030b2:	f240 4344 	movw	r3, #1092	; 0x444
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d107      	bne.n	80030cc <HAL_TIM_Base_Stop+0x38>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_TIM_ConfigClockSource+0x1c>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e0b4      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x186>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2202      	movs	r2, #2
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800311c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003124:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003136:	d03e      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0xd4>
 8003138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800313c:	f200 8087 	bhi.w	800324e <HAL_TIM_ConfigClockSource+0x16c>
 8003140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003144:	f000 8086 	beq.w	8003254 <HAL_TIM_ConfigClockSource+0x172>
 8003148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314c:	d87f      	bhi.n	800324e <HAL_TIM_ConfigClockSource+0x16c>
 800314e:	2b70      	cmp	r3, #112	; 0x70
 8003150:	d01a      	beq.n	8003188 <HAL_TIM_ConfigClockSource+0xa6>
 8003152:	2b70      	cmp	r3, #112	; 0x70
 8003154:	d87b      	bhi.n	800324e <HAL_TIM_ConfigClockSource+0x16c>
 8003156:	2b60      	cmp	r3, #96	; 0x60
 8003158:	d050      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0x11a>
 800315a:	2b60      	cmp	r3, #96	; 0x60
 800315c:	d877      	bhi.n	800324e <HAL_TIM_ConfigClockSource+0x16c>
 800315e:	2b50      	cmp	r3, #80	; 0x50
 8003160:	d03c      	beq.n	80031dc <HAL_TIM_ConfigClockSource+0xfa>
 8003162:	2b50      	cmp	r3, #80	; 0x50
 8003164:	d873      	bhi.n	800324e <HAL_TIM_ConfigClockSource+0x16c>
 8003166:	2b40      	cmp	r3, #64	; 0x40
 8003168:	d058      	beq.n	800321c <HAL_TIM_ConfigClockSource+0x13a>
 800316a:	2b40      	cmp	r3, #64	; 0x40
 800316c:	d86f      	bhi.n	800324e <HAL_TIM_ConfigClockSource+0x16c>
 800316e:	2b30      	cmp	r3, #48	; 0x30
 8003170:	d064      	beq.n	800323c <HAL_TIM_ConfigClockSource+0x15a>
 8003172:	2b30      	cmp	r3, #48	; 0x30
 8003174:	d86b      	bhi.n	800324e <HAL_TIM_ConfigClockSource+0x16c>
 8003176:	2b20      	cmp	r3, #32
 8003178:	d060      	beq.n	800323c <HAL_TIM_ConfigClockSource+0x15a>
 800317a:	2b20      	cmp	r3, #32
 800317c:	d867      	bhi.n	800324e <HAL_TIM_ConfigClockSource+0x16c>
 800317e:	2b00      	cmp	r3, #0
 8003180:	d05c      	beq.n	800323c <HAL_TIM_ConfigClockSource+0x15a>
 8003182:	2b10      	cmp	r3, #16
 8003184:	d05a      	beq.n	800323c <HAL_TIM_ConfigClockSource+0x15a>
 8003186:	e062      	b.n	800324e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	6899      	ldr	r1, [r3, #8]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f000 f964 	bl	8003464 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	609a      	str	r2, [r3, #8]
      break;
 80031b4:	e04f      	b.n	8003256 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6899      	ldr	r1, [r3, #8]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f000 f94d 	bl	8003464 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031d8:	609a      	str	r2, [r3, #8]
      break;
 80031da:	e03c      	b.n	8003256 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	461a      	mov	r2, r3
 80031ea:	f000 f8c1 	bl	8003370 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2150      	movs	r1, #80	; 0x50
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 f91a 	bl	800342e <TIM_ITRx_SetConfig>
      break;
 80031fa:	e02c      	b.n	8003256 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	461a      	mov	r2, r3
 800320a:	f000 f8e0 	bl	80033ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2160      	movs	r1, #96	; 0x60
 8003214:	4618      	mov	r0, r3
 8003216:	f000 f90a 	bl	800342e <TIM_ITRx_SetConfig>
      break;
 800321a:	e01c      	b.n	8003256 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6859      	ldr	r1, [r3, #4]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	461a      	mov	r2, r3
 800322a:	f000 f8a1 	bl	8003370 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2140      	movs	r1, #64	; 0x40
 8003234:	4618      	mov	r0, r3
 8003236:	f000 f8fa 	bl	800342e <TIM_ITRx_SetConfig>
      break;
 800323a:	e00c      	b.n	8003256 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4619      	mov	r1, r3
 8003246:	4610      	mov	r0, r2
 8003248:	f000 f8f1 	bl	800342e <TIM_ITRx_SetConfig>
      break;
 800324c:	e003      	b.n	8003256 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	73fb      	strb	r3, [r7, #15]
      break;
 8003252:	e000      	b.n	8003256 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003254:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a34      	ldr	r2, [pc, #208]	; (8003354 <TIM_Base_SetConfig+0xe4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00f      	beq.n	80032a8 <TIM_Base_SetConfig+0x38>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328e:	d00b      	beq.n	80032a8 <TIM_Base_SetConfig+0x38>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a31      	ldr	r2, [pc, #196]	; (8003358 <TIM_Base_SetConfig+0xe8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d007      	beq.n	80032a8 <TIM_Base_SetConfig+0x38>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a30      	ldr	r2, [pc, #192]	; (800335c <TIM_Base_SetConfig+0xec>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d003      	beq.n	80032a8 <TIM_Base_SetConfig+0x38>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a2f      	ldr	r2, [pc, #188]	; (8003360 <TIM_Base_SetConfig+0xf0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d108      	bne.n	80032ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a25      	ldr	r2, [pc, #148]	; (8003354 <TIM_Base_SetConfig+0xe4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01b      	beq.n	80032fa <TIM_Base_SetConfig+0x8a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c8:	d017      	beq.n	80032fa <TIM_Base_SetConfig+0x8a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a22      	ldr	r2, [pc, #136]	; (8003358 <TIM_Base_SetConfig+0xe8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <TIM_Base_SetConfig+0x8a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a21      	ldr	r2, [pc, #132]	; (800335c <TIM_Base_SetConfig+0xec>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00f      	beq.n	80032fa <TIM_Base_SetConfig+0x8a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a20      	ldr	r2, [pc, #128]	; (8003360 <TIM_Base_SetConfig+0xf0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00b      	beq.n	80032fa <TIM_Base_SetConfig+0x8a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <TIM_Base_SetConfig+0xf4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d007      	beq.n	80032fa <TIM_Base_SetConfig+0x8a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a1e      	ldr	r2, [pc, #120]	; (8003368 <TIM_Base_SetConfig+0xf8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <TIM_Base_SetConfig+0x8a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a1d      	ldr	r2, [pc, #116]	; (800336c <TIM_Base_SetConfig+0xfc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d108      	bne.n	800330c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a08      	ldr	r2, [pc, #32]	; (8003354 <TIM_Base_SetConfig+0xe4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d103      	bne.n	8003340 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	615a      	str	r2, [r3, #20]
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40010000 	.word	0x40010000
 8003358:	40000400 	.word	0x40000400
 800335c:	40000800 	.word	0x40000800
 8003360:	40000c00 	.word	0x40000c00
 8003364:	40014000 	.word	0x40014000
 8003368:	40014400 	.word	0x40014400
 800336c:	40014800 	.word	0x40014800

08003370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f023 0201 	bic.w	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800339a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f023 030a 	bic.w	r3, r3, #10
 80033ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b087      	sub	sp, #28
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f023 0210 	bic.w	r2, r3, #16
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	031b      	lsls	r3, r3, #12
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800340a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	621a      	str	r2, [r3, #32]
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003444:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	f043 0307 	orr.w	r3, r3, #7
 8003450:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	609a      	str	r2, [r3, #8]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800347e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	021a      	lsls	r2, r3, #8
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	431a      	orrs	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4313      	orrs	r3, r2
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	609a      	str	r2, [r3, #8]
}
 8003498:	bf00      	nop
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e050      	b.n	800355e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1c      	ldr	r2, [pc, #112]	; (800356c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d018      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003508:	d013      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a18      	ldr	r2, [pc, #96]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00e      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a16      	ldr	r2, [pc, #88]	; (8003574 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d009      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a15      	ldr	r2, [pc, #84]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a13      	ldr	r2, [pc, #76]	; (800357c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10c      	bne.n	800354c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003538:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	4313      	orrs	r3, r2
 8003542:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40010000 	.word	0x40010000
 8003570:	40000400 	.word	0x40000400
 8003574:	40000800 	.word	0x40000800
 8003578:	40000c00 	.word	0x40000c00
 800357c:	40014000 	.word	0x40014000

08003580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e03f      	b.n	8003612 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fd fd18 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2224      	movs	r2, #36	; 0x24
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fddf 	bl	8004188 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b08a      	sub	sp, #40	; 0x28
 800361e:	af02      	add	r7, sp, #8
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b20      	cmp	r3, #32
 8003638:	d17c      	bne.n	8003734 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_UART_Transmit+0x2c>
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e075      	b.n	8003736 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_UART_Transmit+0x3e>
 8003654:	2302      	movs	r3, #2
 8003656:	e06e      	b.n	8003736 <HAL_UART_Transmit+0x11c>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2221      	movs	r2, #33	; 0x21
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800366e:	f7fe f829 	bl	80016c4 <HAL_GetTick>
 8003672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003688:	d108      	bne.n	800369c <HAL_UART_Transmit+0x82>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	e003      	b.n	80036a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036ac:	e02a      	b.n	8003704 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2200      	movs	r2, #0
 80036b6:	2180      	movs	r1, #128	; 0x80
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fb1f 	bl	8003cfc <UART_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e036      	b.n	8003736 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	3302      	adds	r3, #2
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	e007      	b.n	80036f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	781a      	ldrb	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	3301      	adds	r3, #1
 80036f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1cf      	bne.n	80036ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2200      	movs	r2, #0
 8003716:	2140      	movs	r1, #64	; 0x40
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 faef 	bl	8003cfc <UART_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e006      	b.n	8003736 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	e000      	b.n	8003736 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
  }
}
 8003736:	4618      	mov	r0, r3
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	4613      	mov	r3, r2
 800374a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b20      	cmp	r3, #32
 8003756:	d11d      	bne.n	8003794 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_UART_Receive_IT+0x26>
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e016      	b.n	8003796 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_UART_Receive_IT+0x38>
 8003772:	2302      	movs	r3, #2
 8003774:	e00f      	b.n	8003796 <HAL_UART_Receive_IT+0x58>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	461a      	mov	r2, r3
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 fb24 	bl	8003dd8 <UART_Start_Receive_IT>
 8003790:	4603      	mov	r3, r0
 8003792:	e000      	b.n	8003796 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003794:	2302      	movs	r3, #2
  }
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b0ba      	sub	sp, #232	; 0xe8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80037de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10f      	bne.n	8003806 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <HAL_UART_IRQHandler+0x66>
 80037f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fc07 	bl	8004012 <UART_Receive_IT>
      return;
 8003804:	e256      	b.n	8003cb4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003806:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80de 	beq.w	80039cc <HAL_UART_IRQHandler+0x22c>
 8003810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d106      	bne.n	800382a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800381c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003820:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 80d1 	beq.w	80039cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800382a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <HAL_UART_IRQHandler+0xae>
 8003836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f043 0201 	orr.w	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800384e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <HAL_UART_IRQHandler+0xd2>
 800385a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f043 0202 	orr.w	r2, r3, #2
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00b      	beq.n	8003896 <HAL_UART_IRQHandler+0xf6>
 800387e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d005      	beq.n	8003896 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f043 0204 	orr.w	r2, r3, #4
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d011      	beq.n	80038c6 <HAL_UART_IRQHandler+0x126>
 80038a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d105      	bne.n	80038ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f043 0208 	orr.w	r2, r3, #8
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 81ed 	beq.w	8003caa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_UART_IRQHandler+0x14e>
 80038dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fb92 	bl	8004012 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d103      	bne.n	800391a <HAL_UART_IRQHandler+0x17a>
 8003912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d04f      	beq.n	80039ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fa9a 	bl	8003e54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d141      	bne.n	80039b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3314      	adds	r3, #20
 8003934:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800394c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3314      	adds	r3, #20
 8003956:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800395a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800395e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003962:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003966:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800396a:	e841 2300 	strex	r3, r2, [r1]
 800396e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1d9      	bne.n	800392e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	2b00      	cmp	r3, #0
 8003980:	d013      	beq.n	80039aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	4a7d      	ldr	r2, [pc, #500]	; (8003b7c <HAL_UART_IRQHandler+0x3dc>)
 8003988:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe f849 	bl	8001a26 <HAL_DMA_Abort_IT>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d016      	beq.n	80039c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039a4:	4610      	mov	r0, r2
 80039a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a8:	e00e      	b.n	80039c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f990 	bl	8003cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b0:	e00a      	b.n	80039c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f98c 	bl	8003cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b8:	e006      	b.n	80039c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f988 	bl	8003cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80039c6:	e170      	b.n	8003caa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c8:	bf00      	nop
    return;
 80039ca:	e16e      	b.n	8003caa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	f040 814a 	bne.w	8003c6a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8143 	beq.w	8003c6a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 813c 	beq.w	8003c6a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039f2:	2300      	movs	r3, #0
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a12:	2b40      	cmp	r3, #64	; 0x40
 8003a14:	f040 80b4 	bne.w	8003b80 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8140 	beq.w	8003cae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a36:	429a      	cmp	r2, r3
 8003a38:	f080 8139 	bcs.w	8003cae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a4e:	f000 8088 	beq.w	8003b62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	330c      	adds	r3, #12
 8003a58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1d9      	bne.n	8003a52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3314      	adds	r3, #20
 8003aa4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ab0:	f023 0301 	bic.w	r3, r3, #1
 8003ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3314      	adds	r3, #20
 8003abe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ac2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ac6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003aca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e1      	bne.n	8003a9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3314      	adds	r3, #20
 8003ae0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3314      	adds	r3, #20
 8003afa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003afe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e3      	bne.n	8003ada <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2a:	e853 3f00 	ldrex	r3, [r3]
 8003b2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b32:	f023 0310 	bic.w	r3, r3, #16
 8003b36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	330c      	adds	r3, #12
 8003b40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b44:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b4c:	e841 2300 	strex	r3, r2, [r1]
 8003b50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e3      	bne.n	8003b20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fd fef2 	bl	8001946 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	4619      	mov	r1, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f8b6 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b78:	e099      	b.n	8003cae <HAL_UART_IRQHandler+0x50e>
 8003b7a:	bf00      	nop
 8003b7c:	08003f1b 	.word	0x08003f1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 808b 	beq.w	8003cb2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 8086 	beq.w	8003cb2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	330c      	adds	r3, #12
 8003bac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003bca:	647a      	str	r2, [r7, #68]	; 0x44
 8003bcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e3      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3314      	adds	r3, #20
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	e853 3f00 	ldrex	r3, [r3]
 8003bec:	623b      	str	r3, [r7, #32]
   return(result);
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3314      	adds	r3, #20
 8003bfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c02:	633a      	str	r2, [r7, #48]	; 0x30
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e3      	bne.n	8003bde <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0310 	bic.w	r3, r3, #16
 8003c3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	330c      	adds	r3, #12
 8003c44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c48:	61fa      	str	r2, [r7, #28]
 8003c4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	69b9      	ldr	r1, [r7, #24]
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	617b      	str	r3, [r7, #20]
   return(result);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e3      	bne.n	8003c24 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c60:	4619      	mov	r1, r3
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f83e 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c68:	e023      	b.n	8003cb2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <HAL_UART_IRQHandler+0x4ea>
 8003c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f95d 	bl	8003f42 <UART_Transmit_IT>
    return;
 8003c88:	e014      	b.n	8003cb4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00e      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x514>
 8003c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d008      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f99d 	bl	8003fe2 <UART_EndTransmit_IT>
    return;
 8003ca8:	e004      	b.n	8003cb4 <HAL_UART_IRQHandler+0x514>
    return;
 8003caa:	bf00      	nop
 8003cac:	e002      	b.n	8003cb4 <HAL_UART_IRQHandler+0x514>
      return;
 8003cae:	bf00      	nop
 8003cb0:	e000      	b.n	8003cb4 <HAL_UART_IRQHandler+0x514>
      return;
 8003cb2:	bf00      	nop
  }
}
 8003cb4:	37e8      	adds	r7, #232	; 0xe8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop

08003cbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b090      	sub	sp, #64	; 0x40
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0c:	e050      	b.n	8003db0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d14:	d04c      	beq.n	8003db0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d007      	beq.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d1c:	f7fd fcd2 	bl	80016c4 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d241      	bcs.n	8003db0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	330c      	adds	r3, #12
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d4c:	637a      	str	r2, [r7, #52]	; 0x34
 8003d4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e5      	bne.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3314      	adds	r3, #20
 8003d66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3314      	adds	r3, #20
 8003d7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d80:	623a      	str	r2, [r7, #32]
 8003d82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	69f9      	ldr	r1, [r7, #28]
 8003d86:	6a3a      	ldr	r2, [r7, #32]
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e5      	bne.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e00f      	b.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4013      	ands	r3, r2
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d09f      	beq.n	8003d0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3740      	adds	r7, #64	; 0x40
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	88fa      	ldrh	r2, [r7, #6]
 8003df0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	88fa      	ldrh	r2, [r7, #6]
 8003df6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2222      	movs	r2, #34	; 0x22
 8003e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e24:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695a      	ldr	r2, [r3, #20]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0201 	orr.w	r2, r2, #1
 8003e34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0220 	orr.w	r2, r2, #32
 8003e44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b095      	sub	sp, #84	; 0x54
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e7c:	643a      	str	r2, [r7, #64]	; 0x40
 8003e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e5      	bne.n	8003e5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3314      	adds	r3, #20
 8003e96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3314      	adds	r3, #20
 8003eae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e5      	bne.n	8003e90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d119      	bne.n	8003f00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	60bb      	str	r3, [r7, #8]
   return(result);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f023 0310 	bic.w	r3, r3, #16
 8003ee2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eec:	61ba      	str	r2, [r7, #24]
 8003eee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6979      	ldr	r1, [r7, #20]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e5      	bne.n	8003ecc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f0e:	bf00      	nop
 8003f10:	3754      	adds	r7, #84	; 0x54
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7ff fecb 	bl	8003cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f3a:	bf00      	nop
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b21      	cmp	r3, #33	; 0x21
 8003f54:	d13e      	bne.n	8003fd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5e:	d114      	bne.n	8003f8a <UART_Transmit_IT+0x48>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d110      	bne.n	8003f8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	1c9a      	adds	r2, r3, #2
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	621a      	str	r2, [r3, #32]
 8003f88:	e008      	b.n	8003f9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	1c59      	adds	r1, r3, #1
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6211      	str	r1, [r2, #32]
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10f      	bne.n	8003fd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e000      	b.n	8003fd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff fe5a 	bl	8003cbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b08c      	sub	sp, #48	; 0x30
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b22      	cmp	r3, #34	; 0x22
 8004024:	f040 80ab 	bne.w	800417e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004030:	d117      	bne.n	8004062 <UART_Receive_IT+0x50>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d113      	bne.n	8004062 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	b29b      	uxth	r3, r3
 800404c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004050:	b29a      	uxth	r2, r3
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	1c9a      	adds	r2, r3, #2
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
 8004060:	e026      	b.n	80040b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004068:	2300      	movs	r3, #0
 800406a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004074:	d007      	beq.n	8004086 <UART_Receive_IT+0x74>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10a      	bne.n	8004094 <UART_Receive_IT+0x82>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	e008      	b.n	80040a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	4619      	mov	r1, r3
 80040be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d15a      	bne.n	800417a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0220 	bic.w	r2, r2, #32
 80040d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	2b01      	cmp	r3, #1
 8004102:	d135      	bne.n	8004170 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	330c      	adds	r3, #12
 8004110:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	613b      	str	r3, [r7, #16]
   return(result);
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f023 0310 	bic.w	r3, r3, #16
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	330c      	adds	r3, #12
 8004128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412a:	623a      	str	r2, [r7, #32]
 800412c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	69f9      	ldr	r1, [r7, #28]
 8004130:	6a3a      	ldr	r2, [r7, #32]
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	61bb      	str	r3, [r7, #24]
   return(result);
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e5      	bne.n	800410a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b10      	cmp	r3, #16
 800414a:	d10a      	bne.n	8004162 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004166:	4619      	mov	r1, r3
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff fdbb 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
 800416e:	e002      	b.n	8004176 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7fc fbd1 	bl	8000918 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	e002      	b.n	8004180 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3730      	adds	r7, #48	; 0x30
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800418c:	b0c0      	sub	sp, #256	; 0x100
 800418e:	af00      	add	r7, sp, #0
 8004190:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a4:	68d9      	ldr	r1, [r3, #12]
 80041a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	ea40 0301 	orr.w	r3, r0, r1
 80041b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	431a      	orrs	r2, r3
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041e0:	f021 010c 	bic.w	r1, r1, #12
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041ee:	430b      	orrs	r3, r1
 80041f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004202:	6999      	ldr	r1, [r3, #24]
 8004204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	ea40 0301 	orr.w	r3, r0, r1
 800420e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4b8f      	ldr	r3, [pc, #572]	; (8004454 <UART_SetConfig+0x2cc>)
 8004218:	429a      	cmp	r2, r3
 800421a:	d005      	beq.n	8004228 <UART_SetConfig+0xa0>
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4b8d      	ldr	r3, [pc, #564]	; (8004458 <UART_SetConfig+0x2d0>)
 8004224:	429a      	cmp	r2, r3
 8004226:	d104      	bne.n	8004232 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004228:	f7fe fe76 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 800422c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004230:	e003      	b.n	800423a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004232:	f7fe fe5d 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8004236:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004244:	f040 810c 	bne.w	8004460 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800424c:	2200      	movs	r2, #0
 800424e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004252:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004256:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800425a:	4622      	mov	r2, r4
 800425c:	462b      	mov	r3, r5
 800425e:	1891      	adds	r1, r2, r2
 8004260:	65b9      	str	r1, [r7, #88]	; 0x58
 8004262:	415b      	adcs	r3, r3
 8004264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004266:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800426a:	4621      	mov	r1, r4
 800426c:	eb12 0801 	adds.w	r8, r2, r1
 8004270:	4629      	mov	r1, r5
 8004272:	eb43 0901 	adc.w	r9, r3, r1
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800428a:	4690      	mov	r8, r2
 800428c:	4699      	mov	r9, r3
 800428e:	4623      	mov	r3, r4
 8004290:	eb18 0303 	adds.w	r3, r8, r3
 8004294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004298:	462b      	mov	r3, r5
 800429a:	eb49 0303 	adc.w	r3, r9, r3
 800429e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042b6:	460b      	mov	r3, r1
 80042b8:	18db      	adds	r3, r3, r3
 80042ba:	653b      	str	r3, [r7, #80]	; 0x50
 80042bc:	4613      	mov	r3, r2
 80042be:	eb42 0303 	adc.w	r3, r2, r3
 80042c2:	657b      	str	r3, [r7, #84]	; 0x54
 80042c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042cc:	f7fb ffd8 	bl	8000280 <__aeabi_uldivmod>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4b61      	ldr	r3, [pc, #388]	; (800445c <UART_SetConfig+0x2d4>)
 80042d6:	fba3 2302 	umull	r2, r3, r3, r2
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	011c      	lsls	r4, r3, #4
 80042de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042f0:	4642      	mov	r2, r8
 80042f2:	464b      	mov	r3, r9
 80042f4:	1891      	adds	r1, r2, r2
 80042f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80042f8:	415b      	adcs	r3, r3
 80042fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004300:	4641      	mov	r1, r8
 8004302:	eb12 0a01 	adds.w	sl, r2, r1
 8004306:	4649      	mov	r1, r9
 8004308:	eb43 0b01 	adc.w	fp, r3, r1
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004318:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800431c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004320:	4692      	mov	sl, r2
 8004322:	469b      	mov	fp, r3
 8004324:	4643      	mov	r3, r8
 8004326:	eb1a 0303 	adds.w	r3, sl, r3
 800432a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800432e:	464b      	mov	r3, r9
 8004330:	eb4b 0303 	adc.w	r3, fp, r3
 8004334:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004344:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004348:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800434c:	460b      	mov	r3, r1
 800434e:	18db      	adds	r3, r3, r3
 8004350:	643b      	str	r3, [r7, #64]	; 0x40
 8004352:	4613      	mov	r3, r2
 8004354:	eb42 0303 	adc.w	r3, r2, r3
 8004358:	647b      	str	r3, [r7, #68]	; 0x44
 800435a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800435e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004362:	f7fb ff8d 	bl	8000280 <__aeabi_uldivmod>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4611      	mov	r1, r2
 800436c:	4b3b      	ldr	r3, [pc, #236]	; (800445c <UART_SetConfig+0x2d4>)
 800436e:	fba3 2301 	umull	r2, r3, r3, r1
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2264      	movs	r2, #100	; 0x64
 8004376:	fb02 f303 	mul.w	r3, r2, r3
 800437a:	1acb      	subs	r3, r1, r3
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004382:	4b36      	ldr	r3, [pc, #216]	; (800445c <UART_SetConfig+0x2d4>)
 8004384:	fba3 2302 	umull	r2, r3, r3, r2
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004390:	441c      	add	r4, r3
 8004392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004396:	2200      	movs	r2, #0
 8004398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800439c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043a4:	4642      	mov	r2, r8
 80043a6:	464b      	mov	r3, r9
 80043a8:	1891      	adds	r1, r2, r2
 80043aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80043ac:	415b      	adcs	r3, r3
 80043ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043b4:	4641      	mov	r1, r8
 80043b6:	1851      	adds	r1, r2, r1
 80043b8:	6339      	str	r1, [r7, #48]	; 0x30
 80043ba:	4649      	mov	r1, r9
 80043bc:	414b      	adcs	r3, r1
 80043be:	637b      	str	r3, [r7, #52]	; 0x34
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043cc:	4659      	mov	r1, fp
 80043ce:	00cb      	lsls	r3, r1, #3
 80043d0:	4651      	mov	r1, sl
 80043d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043d6:	4651      	mov	r1, sl
 80043d8:	00ca      	lsls	r2, r1, #3
 80043da:	4610      	mov	r0, r2
 80043dc:	4619      	mov	r1, r3
 80043de:	4603      	mov	r3, r0
 80043e0:	4642      	mov	r2, r8
 80043e2:	189b      	adds	r3, r3, r2
 80043e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043e8:	464b      	mov	r3, r9
 80043ea:	460a      	mov	r2, r1
 80043ec:	eb42 0303 	adc.w	r3, r2, r3
 80043f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004400:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004404:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004408:	460b      	mov	r3, r1
 800440a:	18db      	adds	r3, r3, r3
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
 800440e:	4613      	mov	r3, r2
 8004410:	eb42 0303 	adc.w	r3, r2, r3
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004416:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800441a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800441e:	f7fb ff2f 	bl	8000280 <__aeabi_uldivmod>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4b0d      	ldr	r3, [pc, #52]	; (800445c <UART_SetConfig+0x2d4>)
 8004428:	fba3 1302 	umull	r1, r3, r3, r2
 800442c:	095b      	lsrs	r3, r3, #5
 800442e:	2164      	movs	r1, #100	; 0x64
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	3332      	adds	r3, #50	; 0x32
 800443a:	4a08      	ldr	r2, [pc, #32]	; (800445c <UART_SetConfig+0x2d4>)
 800443c:	fba2 2303 	umull	r2, r3, r2, r3
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	f003 0207 	and.w	r2, r3, #7
 8004446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4422      	add	r2, r4
 800444e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004450:	e105      	b.n	800465e <UART_SetConfig+0x4d6>
 8004452:	bf00      	nop
 8004454:	40011000 	.word	0x40011000
 8004458:	40011400 	.word	0x40011400
 800445c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004464:	2200      	movs	r2, #0
 8004466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800446a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800446e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004472:	4642      	mov	r2, r8
 8004474:	464b      	mov	r3, r9
 8004476:	1891      	adds	r1, r2, r2
 8004478:	6239      	str	r1, [r7, #32]
 800447a:	415b      	adcs	r3, r3
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
 800447e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004482:	4641      	mov	r1, r8
 8004484:	1854      	adds	r4, r2, r1
 8004486:	4649      	mov	r1, r9
 8004488:	eb43 0501 	adc.w	r5, r3, r1
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	00eb      	lsls	r3, r5, #3
 8004496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800449a:	00e2      	lsls	r2, r4, #3
 800449c:	4614      	mov	r4, r2
 800449e:	461d      	mov	r5, r3
 80044a0:	4643      	mov	r3, r8
 80044a2:	18e3      	adds	r3, r4, r3
 80044a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044a8:	464b      	mov	r3, r9
 80044aa:	eb45 0303 	adc.w	r3, r5, r3
 80044ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044ce:	4629      	mov	r1, r5
 80044d0:	008b      	lsls	r3, r1, #2
 80044d2:	4621      	mov	r1, r4
 80044d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d8:	4621      	mov	r1, r4
 80044da:	008a      	lsls	r2, r1, #2
 80044dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044e0:	f7fb fece 	bl	8000280 <__aeabi_uldivmod>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4b60      	ldr	r3, [pc, #384]	; (800466c <UART_SetConfig+0x4e4>)
 80044ea:	fba3 2302 	umull	r2, r3, r3, r2
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	011c      	lsls	r4, r3, #4
 80044f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004500:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004504:	4642      	mov	r2, r8
 8004506:	464b      	mov	r3, r9
 8004508:	1891      	adds	r1, r2, r2
 800450a:	61b9      	str	r1, [r7, #24]
 800450c:	415b      	adcs	r3, r3
 800450e:	61fb      	str	r3, [r7, #28]
 8004510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004514:	4641      	mov	r1, r8
 8004516:	1851      	adds	r1, r2, r1
 8004518:	6139      	str	r1, [r7, #16]
 800451a:	4649      	mov	r1, r9
 800451c:	414b      	adcs	r3, r1
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800452c:	4659      	mov	r1, fp
 800452e:	00cb      	lsls	r3, r1, #3
 8004530:	4651      	mov	r1, sl
 8004532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004536:	4651      	mov	r1, sl
 8004538:	00ca      	lsls	r2, r1, #3
 800453a:	4610      	mov	r0, r2
 800453c:	4619      	mov	r1, r3
 800453e:	4603      	mov	r3, r0
 8004540:	4642      	mov	r2, r8
 8004542:	189b      	adds	r3, r3, r2
 8004544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004548:	464b      	mov	r3, r9
 800454a:	460a      	mov	r2, r1
 800454c:	eb42 0303 	adc.w	r3, r2, r3
 8004550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	67bb      	str	r3, [r7, #120]	; 0x78
 800455e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800456c:	4649      	mov	r1, r9
 800456e:	008b      	lsls	r3, r1, #2
 8004570:	4641      	mov	r1, r8
 8004572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004576:	4641      	mov	r1, r8
 8004578:	008a      	lsls	r2, r1, #2
 800457a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800457e:	f7fb fe7f 	bl	8000280 <__aeabi_uldivmod>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4b39      	ldr	r3, [pc, #228]	; (800466c <UART_SetConfig+0x4e4>)
 8004588:	fba3 1302 	umull	r1, r3, r3, r2
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	2164      	movs	r1, #100	; 0x64
 8004590:	fb01 f303 	mul.w	r3, r1, r3
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	3332      	adds	r3, #50	; 0x32
 800459a:	4a34      	ldr	r2, [pc, #208]	; (800466c <UART_SetConfig+0x4e4>)
 800459c:	fba2 2303 	umull	r2, r3, r2, r3
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a6:	441c      	add	r4, r3
 80045a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ac:	2200      	movs	r2, #0
 80045ae:	673b      	str	r3, [r7, #112]	; 0x70
 80045b0:	677a      	str	r2, [r7, #116]	; 0x74
 80045b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045b6:	4642      	mov	r2, r8
 80045b8:	464b      	mov	r3, r9
 80045ba:	1891      	adds	r1, r2, r2
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	415b      	adcs	r3, r3
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045c6:	4641      	mov	r1, r8
 80045c8:	1851      	adds	r1, r2, r1
 80045ca:	6039      	str	r1, [r7, #0]
 80045cc:	4649      	mov	r1, r9
 80045ce:	414b      	adcs	r3, r1
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045de:	4659      	mov	r1, fp
 80045e0:	00cb      	lsls	r3, r1, #3
 80045e2:	4651      	mov	r1, sl
 80045e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045e8:	4651      	mov	r1, sl
 80045ea:	00ca      	lsls	r2, r1, #3
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	4603      	mov	r3, r0
 80045f2:	4642      	mov	r2, r8
 80045f4:	189b      	adds	r3, r3, r2
 80045f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045f8:	464b      	mov	r3, r9
 80045fa:	460a      	mov	r2, r1
 80045fc:	eb42 0303 	adc.w	r3, r2, r3
 8004600:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	663b      	str	r3, [r7, #96]	; 0x60
 800460c:	667a      	str	r2, [r7, #100]	; 0x64
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800461a:	4649      	mov	r1, r9
 800461c:	008b      	lsls	r3, r1, #2
 800461e:	4641      	mov	r1, r8
 8004620:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004624:	4641      	mov	r1, r8
 8004626:	008a      	lsls	r2, r1, #2
 8004628:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800462c:	f7fb fe28 	bl	8000280 <__aeabi_uldivmod>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4b0d      	ldr	r3, [pc, #52]	; (800466c <UART_SetConfig+0x4e4>)
 8004636:	fba3 1302 	umull	r1, r3, r3, r2
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	2164      	movs	r1, #100	; 0x64
 800463e:	fb01 f303 	mul.w	r3, r1, r3
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	3332      	adds	r3, #50	; 0x32
 8004648:	4a08      	ldr	r2, [pc, #32]	; (800466c <UART_SetConfig+0x4e4>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	f003 020f 	and.w	r2, r3, #15
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4422      	add	r2, r4
 800465c:	609a      	str	r2, [r3, #8]
}
 800465e:	bf00      	nop
 8004660:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004664:	46bd      	mov	sp, r7
 8004666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800466a:	bf00      	nop
 800466c:	51eb851f 	.word	0x51eb851f

08004670 <__errno>:
 8004670:	4b01      	ldr	r3, [pc, #4]	; (8004678 <__errno+0x8>)
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	20000018 	.word	0x20000018

0800467c <__libc_init_array>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	4d0d      	ldr	r5, [pc, #52]	; (80046b4 <__libc_init_array+0x38>)
 8004680:	4c0d      	ldr	r4, [pc, #52]	; (80046b8 <__libc_init_array+0x3c>)
 8004682:	1b64      	subs	r4, r4, r5
 8004684:	10a4      	asrs	r4, r4, #2
 8004686:	2600      	movs	r6, #0
 8004688:	42a6      	cmp	r6, r4
 800468a:	d109      	bne.n	80046a0 <__libc_init_array+0x24>
 800468c:	4d0b      	ldr	r5, [pc, #44]	; (80046bc <__libc_init_array+0x40>)
 800468e:	4c0c      	ldr	r4, [pc, #48]	; (80046c0 <__libc_init_array+0x44>)
 8004690:	f000 fc8e 	bl	8004fb0 <_init>
 8004694:	1b64      	subs	r4, r4, r5
 8004696:	10a4      	asrs	r4, r4, #2
 8004698:	2600      	movs	r6, #0
 800469a:	42a6      	cmp	r6, r4
 800469c:	d105      	bne.n	80046aa <__libc_init_array+0x2e>
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a4:	4798      	blx	r3
 80046a6:	3601      	adds	r6, #1
 80046a8:	e7ee      	b.n	8004688 <__libc_init_array+0xc>
 80046aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ae:	4798      	blx	r3
 80046b0:	3601      	adds	r6, #1
 80046b2:	e7f2      	b.n	800469a <__libc_init_array+0x1e>
 80046b4:	08005eb0 	.word	0x08005eb0
 80046b8:	08005eb0 	.word	0x08005eb0
 80046bc:	08005eb0 	.word	0x08005eb0
 80046c0:	08005eb4 	.word	0x08005eb4

080046c4 <memcpy>:
 80046c4:	440a      	add	r2, r1
 80046c6:	4291      	cmp	r1, r2
 80046c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80046cc:	d100      	bne.n	80046d0 <memcpy+0xc>
 80046ce:	4770      	bx	lr
 80046d0:	b510      	push	{r4, lr}
 80046d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046da:	4291      	cmp	r1, r2
 80046dc:	d1f9      	bne.n	80046d2 <memcpy+0xe>
 80046de:	bd10      	pop	{r4, pc}

080046e0 <memset>:
 80046e0:	4402      	add	r2, r0
 80046e2:	4603      	mov	r3, r0
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d100      	bne.n	80046ea <memset+0xa>
 80046e8:	4770      	bx	lr
 80046ea:	f803 1b01 	strb.w	r1, [r3], #1
 80046ee:	e7f9      	b.n	80046e4 <memset+0x4>

080046f0 <siprintf>:
 80046f0:	b40e      	push	{r1, r2, r3}
 80046f2:	b500      	push	{lr}
 80046f4:	b09c      	sub	sp, #112	; 0x70
 80046f6:	ab1d      	add	r3, sp, #116	; 0x74
 80046f8:	9002      	str	r0, [sp, #8]
 80046fa:	9006      	str	r0, [sp, #24]
 80046fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004700:	4809      	ldr	r0, [pc, #36]	; (8004728 <siprintf+0x38>)
 8004702:	9107      	str	r1, [sp, #28]
 8004704:	9104      	str	r1, [sp, #16]
 8004706:	4909      	ldr	r1, [pc, #36]	; (800472c <siprintf+0x3c>)
 8004708:	f853 2b04 	ldr.w	r2, [r3], #4
 800470c:	9105      	str	r1, [sp, #20]
 800470e:	6800      	ldr	r0, [r0, #0]
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	a902      	add	r1, sp, #8
 8004714:	f000 f868 	bl	80047e8 <_svfiprintf_r>
 8004718:	9b02      	ldr	r3, [sp, #8]
 800471a:	2200      	movs	r2, #0
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	b01c      	add	sp, #112	; 0x70
 8004720:	f85d eb04 	ldr.w	lr, [sp], #4
 8004724:	b003      	add	sp, #12
 8004726:	4770      	bx	lr
 8004728:	20000018 	.word	0x20000018
 800472c:	ffff0208 	.word	0xffff0208

08004730 <__ssputs_r>:
 8004730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004734:	688e      	ldr	r6, [r1, #8]
 8004736:	429e      	cmp	r6, r3
 8004738:	4682      	mov	sl, r0
 800473a:	460c      	mov	r4, r1
 800473c:	4690      	mov	r8, r2
 800473e:	461f      	mov	r7, r3
 8004740:	d838      	bhi.n	80047b4 <__ssputs_r+0x84>
 8004742:	898a      	ldrh	r2, [r1, #12]
 8004744:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004748:	d032      	beq.n	80047b0 <__ssputs_r+0x80>
 800474a:	6825      	ldr	r5, [r4, #0]
 800474c:	6909      	ldr	r1, [r1, #16]
 800474e:	eba5 0901 	sub.w	r9, r5, r1
 8004752:	6965      	ldr	r5, [r4, #20]
 8004754:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004758:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800475c:	3301      	adds	r3, #1
 800475e:	444b      	add	r3, r9
 8004760:	106d      	asrs	r5, r5, #1
 8004762:	429d      	cmp	r5, r3
 8004764:	bf38      	it	cc
 8004766:	461d      	movcc	r5, r3
 8004768:	0553      	lsls	r3, r2, #21
 800476a:	d531      	bpl.n	80047d0 <__ssputs_r+0xa0>
 800476c:	4629      	mov	r1, r5
 800476e:	f000 fb55 	bl	8004e1c <_malloc_r>
 8004772:	4606      	mov	r6, r0
 8004774:	b950      	cbnz	r0, 800478c <__ssputs_r+0x5c>
 8004776:	230c      	movs	r3, #12
 8004778:	f8ca 3000 	str.w	r3, [sl]
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004782:	81a3      	strh	r3, [r4, #12]
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478c:	6921      	ldr	r1, [r4, #16]
 800478e:	464a      	mov	r2, r9
 8004790:	f7ff ff98 	bl	80046c4 <memcpy>
 8004794:	89a3      	ldrh	r3, [r4, #12]
 8004796:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800479a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479e:	81a3      	strh	r3, [r4, #12]
 80047a0:	6126      	str	r6, [r4, #16]
 80047a2:	6165      	str	r5, [r4, #20]
 80047a4:	444e      	add	r6, r9
 80047a6:	eba5 0509 	sub.w	r5, r5, r9
 80047aa:	6026      	str	r6, [r4, #0]
 80047ac:	60a5      	str	r5, [r4, #8]
 80047ae:	463e      	mov	r6, r7
 80047b0:	42be      	cmp	r6, r7
 80047b2:	d900      	bls.n	80047b6 <__ssputs_r+0x86>
 80047b4:	463e      	mov	r6, r7
 80047b6:	6820      	ldr	r0, [r4, #0]
 80047b8:	4632      	mov	r2, r6
 80047ba:	4641      	mov	r1, r8
 80047bc:	f000 faa8 	bl	8004d10 <memmove>
 80047c0:	68a3      	ldr	r3, [r4, #8]
 80047c2:	1b9b      	subs	r3, r3, r6
 80047c4:	60a3      	str	r3, [r4, #8]
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	4433      	add	r3, r6
 80047ca:	6023      	str	r3, [r4, #0]
 80047cc:	2000      	movs	r0, #0
 80047ce:	e7db      	b.n	8004788 <__ssputs_r+0x58>
 80047d0:	462a      	mov	r2, r5
 80047d2:	f000 fb97 	bl	8004f04 <_realloc_r>
 80047d6:	4606      	mov	r6, r0
 80047d8:	2800      	cmp	r0, #0
 80047da:	d1e1      	bne.n	80047a0 <__ssputs_r+0x70>
 80047dc:	6921      	ldr	r1, [r4, #16]
 80047de:	4650      	mov	r0, sl
 80047e0:	f000 fab0 	bl	8004d44 <_free_r>
 80047e4:	e7c7      	b.n	8004776 <__ssputs_r+0x46>
	...

080047e8 <_svfiprintf_r>:
 80047e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ec:	4698      	mov	r8, r3
 80047ee:	898b      	ldrh	r3, [r1, #12]
 80047f0:	061b      	lsls	r3, r3, #24
 80047f2:	b09d      	sub	sp, #116	; 0x74
 80047f4:	4607      	mov	r7, r0
 80047f6:	460d      	mov	r5, r1
 80047f8:	4614      	mov	r4, r2
 80047fa:	d50e      	bpl.n	800481a <_svfiprintf_r+0x32>
 80047fc:	690b      	ldr	r3, [r1, #16]
 80047fe:	b963      	cbnz	r3, 800481a <_svfiprintf_r+0x32>
 8004800:	2140      	movs	r1, #64	; 0x40
 8004802:	f000 fb0b 	bl	8004e1c <_malloc_r>
 8004806:	6028      	str	r0, [r5, #0]
 8004808:	6128      	str	r0, [r5, #16]
 800480a:	b920      	cbnz	r0, 8004816 <_svfiprintf_r+0x2e>
 800480c:	230c      	movs	r3, #12
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	f04f 30ff 	mov.w	r0, #4294967295
 8004814:	e0d1      	b.n	80049ba <_svfiprintf_r+0x1d2>
 8004816:	2340      	movs	r3, #64	; 0x40
 8004818:	616b      	str	r3, [r5, #20]
 800481a:	2300      	movs	r3, #0
 800481c:	9309      	str	r3, [sp, #36]	; 0x24
 800481e:	2320      	movs	r3, #32
 8004820:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004824:	f8cd 800c 	str.w	r8, [sp, #12]
 8004828:	2330      	movs	r3, #48	; 0x30
 800482a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049d4 <_svfiprintf_r+0x1ec>
 800482e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004832:	f04f 0901 	mov.w	r9, #1
 8004836:	4623      	mov	r3, r4
 8004838:	469a      	mov	sl, r3
 800483a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800483e:	b10a      	cbz	r2, 8004844 <_svfiprintf_r+0x5c>
 8004840:	2a25      	cmp	r2, #37	; 0x25
 8004842:	d1f9      	bne.n	8004838 <_svfiprintf_r+0x50>
 8004844:	ebba 0b04 	subs.w	fp, sl, r4
 8004848:	d00b      	beq.n	8004862 <_svfiprintf_r+0x7a>
 800484a:	465b      	mov	r3, fp
 800484c:	4622      	mov	r2, r4
 800484e:	4629      	mov	r1, r5
 8004850:	4638      	mov	r0, r7
 8004852:	f7ff ff6d 	bl	8004730 <__ssputs_r>
 8004856:	3001      	adds	r0, #1
 8004858:	f000 80aa 	beq.w	80049b0 <_svfiprintf_r+0x1c8>
 800485c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800485e:	445a      	add	r2, fp
 8004860:	9209      	str	r2, [sp, #36]	; 0x24
 8004862:	f89a 3000 	ldrb.w	r3, [sl]
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80a2 	beq.w	80049b0 <_svfiprintf_r+0x1c8>
 800486c:	2300      	movs	r3, #0
 800486e:	f04f 32ff 	mov.w	r2, #4294967295
 8004872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004876:	f10a 0a01 	add.w	sl, sl, #1
 800487a:	9304      	str	r3, [sp, #16]
 800487c:	9307      	str	r3, [sp, #28]
 800487e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004882:	931a      	str	r3, [sp, #104]	; 0x68
 8004884:	4654      	mov	r4, sl
 8004886:	2205      	movs	r2, #5
 8004888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800488c:	4851      	ldr	r0, [pc, #324]	; (80049d4 <_svfiprintf_r+0x1ec>)
 800488e:	f7fb fca7 	bl	80001e0 <memchr>
 8004892:	9a04      	ldr	r2, [sp, #16]
 8004894:	b9d8      	cbnz	r0, 80048ce <_svfiprintf_r+0xe6>
 8004896:	06d0      	lsls	r0, r2, #27
 8004898:	bf44      	itt	mi
 800489a:	2320      	movmi	r3, #32
 800489c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048a0:	0711      	lsls	r1, r2, #28
 80048a2:	bf44      	itt	mi
 80048a4:	232b      	movmi	r3, #43	; 0x2b
 80048a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048aa:	f89a 3000 	ldrb.w	r3, [sl]
 80048ae:	2b2a      	cmp	r3, #42	; 0x2a
 80048b0:	d015      	beq.n	80048de <_svfiprintf_r+0xf6>
 80048b2:	9a07      	ldr	r2, [sp, #28]
 80048b4:	4654      	mov	r4, sl
 80048b6:	2000      	movs	r0, #0
 80048b8:	f04f 0c0a 	mov.w	ip, #10
 80048bc:	4621      	mov	r1, r4
 80048be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048c2:	3b30      	subs	r3, #48	; 0x30
 80048c4:	2b09      	cmp	r3, #9
 80048c6:	d94e      	bls.n	8004966 <_svfiprintf_r+0x17e>
 80048c8:	b1b0      	cbz	r0, 80048f8 <_svfiprintf_r+0x110>
 80048ca:	9207      	str	r2, [sp, #28]
 80048cc:	e014      	b.n	80048f8 <_svfiprintf_r+0x110>
 80048ce:	eba0 0308 	sub.w	r3, r0, r8
 80048d2:	fa09 f303 	lsl.w	r3, r9, r3
 80048d6:	4313      	orrs	r3, r2
 80048d8:	9304      	str	r3, [sp, #16]
 80048da:	46a2      	mov	sl, r4
 80048dc:	e7d2      	b.n	8004884 <_svfiprintf_r+0x9c>
 80048de:	9b03      	ldr	r3, [sp, #12]
 80048e0:	1d19      	adds	r1, r3, #4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	9103      	str	r1, [sp, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bfbb      	ittet	lt
 80048ea:	425b      	neglt	r3, r3
 80048ec:	f042 0202 	orrlt.w	r2, r2, #2
 80048f0:	9307      	strge	r3, [sp, #28]
 80048f2:	9307      	strlt	r3, [sp, #28]
 80048f4:	bfb8      	it	lt
 80048f6:	9204      	strlt	r2, [sp, #16]
 80048f8:	7823      	ldrb	r3, [r4, #0]
 80048fa:	2b2e      	cmp	r3, #46	; 0x2e
 80048fc:	d10c      	bne.n	8004918 <_svfiprintf_r+0x130>
 80048fe:	7863      	ldrb	r3, [r4, #1]
 8004900:	2b2a      	cmp	r3, #42	; 0x2a
 8004902:	d135      	bne.n	8004970 <_svfiprintf_r+0x188>
 8004904:	9b03      	ldr	r3, [sp, #12]
 8004906:	1d1a      	adds	r2, r3, #4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	9203      	str	r2, [sp, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	bfb8      	it	lt
 8004910:	f04f 33ff 	movlt.w	r3, #4294967295
 8004914:	3402      	adds	r4, #2
 8004916:	9305      	str	r3, [sp, #20]
 8004918:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049e4 <_svfiprintf_r+0x1fc>
 800491c:	7821      	ldrb	r1, [r4, #0]
 800491e:	2203      	movs	r2, #3
 8004920:	4650      	mov	r0, sl
 8004922:	f7fb fc5d 	bl	80001e0 <memchr>
 8004926:	b140      	cbz	r0, 800493a <_svfiprintf_r+0x152>
 8004928:	2340      	movs	r3, #64	; 0x40
 800492a:	eba0 000a 	sub.w	r0, r0, sl
 800492e:	fa03 f000 	lsl.w	r0, r3, r0
 8004932:	9b04      	ldr	r3, [sp, #16]
 8004934:	4303      	orrs	r3, r0
 8004936:	3401      	adds	r4, #1
 8004938:	9304      	str	r3, [sp, #16]
 800493a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800493e:	4826      	ldr	r0, [pc, #152]	; (80049d8 <_svfiprintf_r+0x1f0>)
 8004940:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004944:	2206      	movs	r2, #6
 8004946:	f7fb fc4b 	bl	80001e0 <memchr>
 800494a:	2800      	cmp	r0, #0
 800494c:	d038      	beq.n	80049c0 <_svfiprintf_r+0x1d8>
 800494e:	4b23      	ldr	r3, [pc, #140]	; (80049dc <_svfiprintf_r+0x1f4>)
 8004950:	bb1b      	cbnz	r3, 800499a <_svfiprintf_r+0x1b2>
 8004952:	9b03      	ldr	r3, [sp, #12]
 8004954:	3307      	adds	r3, #7
 8004956:	f023 0307 	bic.w	r3, r3, #7
 800495a:	3308      	adds	r3, #8
 800495c:	9303      	str	r3, [sp, #12]
 800495e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004960:	4433      	add	r3, r6
 8004962:	9309      	str	r3, [sp, #36]	; 0x24
 8004964:	e767      	b.n	8004836 <_svfiprintf_r+0x4e>
 8004966:	fb0c 3202 	mla	r2, ip, r2, r3
 800496a:	460c      	mov	r4, r1
 800496c:	2001      	movs	r0, #1
 800496e:	e7a5      	b.n	80048bc <_svfiprintf_r+0xd4>
 8004970:	2300      	movs	r3, #0
 8004972:	3401      	adds	r4, #1
 8004974:	9305      	str	r3, [sp, #20]
 8004976:	4619      	mov	r1, r3
 8004978:	f04f 0c0a 	mov.w	ip, #10
 800497c:	4620      	mov	r0, r4
 800497e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004982:	3a30      	subs	r2, #48	; 0x30
 8004984:	2a09      	cmp	r2, #9
 8004986:	d903      	bls.n	8004990 <_svfiprintf_r+0x1a8>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0c5      	beq.n	8004918 <_svfiprintf_r+0x130>
 800498c:	9105      	str	r1, [sp, #20]
 800498e:	e7c3      	b.n	8004918 <_svfiprintf_r+0x130>
 8004990:	fb0c 2101 	mla	r1, ip, r1, r2
 8004994:	4604      	mov	r4, r0
 8004996:	2301      	movs	r3, #1
 8004998:	e7f0      	b.n	800497c <_svfiprintf_r+0x194>
 800499a:	ab03      	add	r3, sp, #12
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	462a      	mov	r2, r5
 80049a0:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <_svfiprintf_r+0x1f8>)
 80049a2:	a904      	add	r1, sp, #16
 80049a4:	4638      	mov	r0, r7
 80049a6:	f3af 8000 	nop.w
 80049aa:	1c42      	adds	r2, r0, #1
 80049ac:	4606      	mov	r6, r0
 80049ae:	d1d6      	bne.n	800495e <_svfiprintf_r+0x176>
 80049b0:	89ab      	ldrh	r3, [r5, #12]
 80049b2:	065b      	lsls	r3, r3, #25
 80049b4:	f53f af2c 	bmi.w	8004810 <_svfiprintf_r+0x28>
 80049b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049ba:	b01d      	add	sp, #116	; 0x74
 80049bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c0:	ab03      	add	r3, sp, #12
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	462a      	mov	r2, r5
 80049c6:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <_svfiprintf_r+0x1f8>)
 80049c8:	a904      	add	r1, sp, #16
 80049ca:	4638      	mov	r0, r7
 80049cc:	f000 f87a 	bl	8004ac4 <_printf_i>
 80049d0:	e7eb      	b.n	80049aa <_svfiprintf_r+0x1c2>
 80049d2:	bf00      	nop
 80049d4:	08005e74 	.word	0x08005e74
 80049d8:	08005e7e 	.word	0x08005e7e
 80049dc:	00000000 	.word	0x00000000
 80049e0:	08004731 	.word	0x08004731
 80049e4:	08005e7a 	.word	0x08005e7a

080049e8 <_printf_common>:
 80049e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049ec:	4616      	mov	r6, r2
 80049ee:	4699      	mov	r9, r3
 80049f0:	688a      	ldr	r2, [r1, #8]
 80049f2:	690b      	ldr	r3, [r1, #16]
 80049f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049f8:	4293      	cmp	r3, r2
 80049fa:	bfb8      	it	lt
 80049fc:	4613      	movlt	r3, r2
 80049fe:	6033      	str	r3, [r6, #0]
 8004a00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a04:	4607      	mov	r7, r0
 8004a06:	460c      	mov	r4, r1
 8004a08:	b10a      	cbz	r2, 8004a0e <_printf_common+0x26>
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	6033      	str	r3, [r6, #0]
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	0699      	lsls	r1, r3, #26
 8004a12:	bf42      	ittt	mi
 8004a14:	6833      	ldrmi	r3, [r6, #0]
 8004a16:	3302      	addmi	r3, #2
 8004a18:	6033      	strmi	r3, [r6, #0]
 8004a1a:	6825      	ldr	r5, [r4, #0]
 8004a1c:	f015 0506 	ands.w	r5, r5, #6
 8004a20:	d106      	bne.n	8004a30 <_printf_common+0x48>
 8004a22:	f104 0a19 	add.w	sl, r4, #25
 8004a26:	68e3      	ldr	r3, [r4, #12]
 8004a28:	6832      	ldr	r2, [r6, #0]
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	42ab      	cmp	r3, r5
 8004a2e:	dc26      	bgt.n	8004a7e <_printf_common+0x96>
 8004a30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a34:	1e13      	subs	r3, r2, #0
 8004a36:	6822      	ldr	r2, [r4, #0]
 8004a38:	bf18      	it	ne
 8004a3a:	2301      	movne	r3, #1
 8004a3c:	0692      	lsls	r2, r2, #26
 8004a3e:	d42b      	bmi.n	8004a98 <_printf_common+0xb0>
 8004a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a44:	4649      	mov	r1, r9
 8004a46:	4638      	mov	r0, r7
 8004a48:	47c0      	blx	r8
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d01e      	beq.n	8004a8c <_printf_common+0xa4>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	68e5      	ldr	r5, [r4, #12]
 8004a52:	6832      	ldr	r2, [r6, #0]
 8004a54:	f003 0306 	and.w	r3, r3, #6
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	bf08      	it	eq
 8004a5c:	1aad      	subeq	r5, r5, r2
 8004a5e:	68a3      	ldr	r3, [r4, #8]
 8004a60:	6922      	ldr	r2, [r4, #16]
 8004a62:	bf0c      	ite	eq
 8004a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a68:	2500      	movne	r5, #0
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	bfc4      	itt	gt
 8004a6e:	1a9b      	subgt	r3, r3, r2
 8004a70:	18ed      	addgt	r5, r5, r3
 8004a72:	2600      	movs	r6, #0
 8004a74:	341a      	adds	r4, #26
 8004a76:	42b5      	cmp	r5, r6
 8004a78:	d11a      	bne.n	8004ab0 <_printf_common+0xc8>
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	e008      	b.n	8004a90 <_printf_common+0xa8>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	4652      	mov	r2, sl
 8004a82:	4649      	mov	r1, r9
 8004a84:	4638      	mov	r0, r7
 8004a86:	47c0      	blx	r8
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d103      	bne.n	8004a94 <_printf_common+0xac>
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a94:	3501      	adds	r5, #1
 8004a96:	e7c6      	b.n	8004a26 <_printf_common+0x3e>
 8004a98:	18e1      	adds	r1, r4, r3
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	2030      	movs	r0, #48	; 0x30
 8004a9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004aa2:	4422      	add	r2, r4
 8004aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004aac:	3302      	adds	r3, #2
 8004aae:	e7c7      	b.n	8004a40 <_printf_common+0x58>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	4649      	mov	r1, r9
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	47c0      	blx	r8
 8004aba:	3001      	adds	r0, #1
 8004abc:	d0e6      	beq.n	8004a8c <_printf_common+0xa4>
 8004abe:	3601      	adds	r6, #1
 8004ac0:	e7d9      	b.n	8004a76 <_printf_common+0x8e>
	...

08004ac4 <_printf_i>:
 8004ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac8:	7e0f      	ldrb	r7, [r1, #24]
 8004aca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004acc:	2f78      	cmp	r7, #120	; 0x78
 8004ace:	4691      	mov	r9, r2
 8004ad0:	4680      	mov	r8, r0
 8004ad2:	460c      	mov	r4, r1
 8004ad4:	469a      	mov	sl, r3
 8004ad6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ada:	d807      	bhi.n	8004aec <_printf_i+0x28>
 8004adc:	2f62      	cmp	r7, #98	; 0x62
 8004ade:	d80a      	bhi.n	8004af6 <_printf_i+0x32>
 8004ae0:	2f00      	cmp	r7, #0
 8004ae2:	f000 80d8 	beq.w	8004c96 <_printf_i+0x1d2>
 8004ae6:	2f58      	cmp	r7, #88	; 0x58
 8004ae8:	f000 80a3 	beq.w	8004c32 <_printf_i+0x16e>
 8004aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004af4:	e03a      	b.n	8004b6c <_printf_i+0xa8>
 8004af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004afa:	2b15      	cmp	r3, #21
 8004afc:	d8f6      	bhi.n	8004aec <_printf_i+0x28>
 8004afe:	a101      	add	r1, pc, #4	; (adr r1, 8004b04 <_printf_i+0x40>)
 8004b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b04:	08004b5d 	.word	0x08004b5d
 8004b08:	08004b71 	.word	0x08004b71
 8004b0c:	08004aed 	.word	0x08004aed
 8004b10:	08004aed 	.word	0x08004aed
 8004b14:	08004aed 	.word	0x08004aed
 8004b18:	08004aed 	.word	0x08004aed
 8004b1c:	08004b71 	.word	0x08004b71
 8004b20:	08004aed 	.word	0x08004aed
 8004b24:	08004aed 	.word	0x08004aed
 8004b28:	08004aed 	.word	0x08004aed
 8004b2c:	08004aed 	.word	0x08004aed
 8004b30:	08004c7d 	.word	0x08004c7d
 8004b34:	08004ba1 	.word	0x08004ba1
 8004b38:	08004c5f 	.word	0x08004c5f
 8004b3c:	08004aed 	.word	0x08004aed
 8004b40:	08004aed 	.word	0x08004aed
 8004b44:	08004c9f 	.word	0x08004c9f
 8004b48:	08004aed 	.word	0x08004aed
 8004b4c:	08004ba1 	.word	0x08004ba1
 8004b50:	08004aed 	.word	0x08004aed
 8004b54:	08004aed 	.word	0x08004aed
 8004b58:	08004c67 	.word	0x08004c67
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	1d1a      	adds	r2, r3, #4
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	602a      	str	r2, [r5, #0]
 8004b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0a3      	b.n	8004cb8 <_printf_i+0x1f4>
 8004b70:	6820      	ldr	r0, [r4, #0]
 8004b72:	6829      	ldr	r1, [r5, #0]
 8004b74:	0606      	lsls	r6, r0, #24
 8004b76:	f101 0304 	add.w	r3, r1, #4
 8004b7a:	d50a      	bpl.n	8004b92 <_printf_i+0xce>
 8004b7c:	680e      	ldr	r6, [r1, #0]
 8004b7e:	602b      	str	r3, [r5, #0]
 8004b80:	2e00      	cmp	r6, #0
 8004b82:	da03      	bge.n	8004b8c <_printf_i+0xc8>
 8004b84:	232d      	movs	r3, #45	; 0x2d
 8004b86:	4276      	negs	r6, r6
 8004b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b8c:	485e      	ldr	r0, [pc, #376]	; (8004d08 <_printf_i+0x244>)
 8004b8e:	230a      	movs	r3, #10
 8004b90:	e019      	b.n	8004bc6 <_printf_i+0x102>
 8004b92:	680e      	ldr	r6, [r1, #0]
 8004b94:	602b      	str	r3, [r5, #0]
 8004b96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b9a:	bf18      	it	ne
 8004b9c:	b236      	sxthne	r6, r6
 8004b9e:	e7ef      	b.n	8004b80 <_printf_i+0xbc>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	6820      	ldr	r0, [r4, #0]
 8004ba4:	1d19      	adds	r1, r3, #4
 8004ba6:	6029      	str	r1, [r5, #0]
 8004ba8:	0601      	lsls	r1, r0, #24
 8004baa:	d501      	bpl.n	8004bb0 <_printf_i+0xec>
 8004bac:	681e      	ldr	r6, [r3, #0]
 8004bae:	e002      	b.n	8004bb6 <_printf_i+0xf2>
 8004bb0:	0646      	lsls	r6, r0, #25
 8004bb2:	d5fb      	bpl.n	8004bac <_printf_i+0xe8>
 8004bb4:	881e      	ldrh	r6, [r3, #0]
 8004bb6:	4854      	ldr	r0, [pc, #336]	; (8004d08 <_printf_i+0x244>)
 8004bb8:	2f6f      	cmp	r7, #111	; 0x6f
 8004bba:	bf0c      	ite	eq
 8004bbc:	2308      	moveq	r3, #8
 8004bbe:	230a      	movne	r3, #10
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bc6:	6865      	ldr	r5, [r4, #4]
 8004bc8:	60a5      	str	r5, [r4, #8]
 8004bca:	2d00      	cmp	r5, #0
 8004bcc:	bfa2      	ittt	ge
 8004bce:	6821      	ldrge	r1, [r4, #0]
 8004bd0:	f021 0104 	bicge.w	r1, r1, #4
 8004bd4:	6021      	strge	r1, [r4, #0]
 8004bd6:	b90e      	cbnz	r6, 8004bdc <_printf_i+0x118>
 8004bd8:	2d00      	cmp	r5, #0
 8004bda:	d04d      	beq.n	8004c78 <_printf_i+0x1b4>
 8004bdc:	4615      	mov	r5, r2
 8004bde:	fbb6 f1f3 	udiv	r1, r6, r3
 8004be2:	fb03 6711 	mls	r7, r3, r1, r6
 8004be6:	5dc7      	ldrb	r7, [r0, r7]
 8004be8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bec:	4637      	mov	r7, r6
 8004bee:	42bb      	cmp	r3, r7
 8004bf0:	460e      	mov	r6, r1
 8004bf2:	d9f4      	bls.n	8004bde <_printf_i+0x11a>
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d10b      	bne.n	8004c10 <_printf_i+0x14c>
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	07de      	lsls	r6, r3, #31
 8004bfc:	d508      	bpl.n	8004c10 <_printf_i+0x14c>
 8004bfe:	6923      	ldr	r3, [r4, #16]
 8004c00:	6861      	ldr	r1, [r4, #4]
 8004c02:	4299      	cmp	r1, r3
 8004c04:	bfde      	ittt	le
 8004c06:	2330      	movle	r3, #48	; 0x30
 8004c08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c10:	1b52      	subs	r2, r2, r5
 8004c12:	6122      	str	r2, [r4, #16]
 8004c14:	f8cd a000 	str.w	sl, [sp]
 8004c18:	464b      	mov	r3, r9
 8004c1a:	aa03      	add	r2, sp, #12
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	4640      	mov	r0, r8
 8004c20:	f7ff fee2 	bl	80049e8 <_printf_common>
 8004c24:	3001      	adds	r0, #1
 8004c26:	d14c      	bne.n	8004cc2 <_printf_i+0x1fe>
 8004c28:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2c:	b004      	add	sp, #16
 8004c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c32:	4835      	ldr	r0, [pc, #212]	; (8004d08 <_printf_i+0x244>)
 8004c34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c38:	6829      	ldr	r1, [r5, #0]
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c40:	6029      	str	r1, [r5, #0]
 8004c42:	061d      	lsls	r5, r3, #24
 8004c44:	d514      	bpl.n	8004c70 <_printf_i+0x1ac>
 8004c46:	07df      	lsls	r7, r3, #31
 8004c48:	bf44      	itt	mi
 8004c4a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c4e:	6023      	strmi	r3, [r4, #0]
 8004c50:	b91e      	cbnz	r6, 8004c5a <_printf_i+0x196>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	f023 0320 	bic.w	r3, r3, #32
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	2310      	movs	r3, #16
 8004c5c:	e7b0      	b.n	8004bc0 <_printf_i+0xfc>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	f043 0320 	orr.w	r3, r3, #32
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	2378      	movs	r3, #120	; 0x78
 8004c68:	4828      	ldr	r0, [pc, #160]	; (8004d0c <_printf_i+0x248>)
 8004c6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c6e:	e7e3      	b.n	8004c38 <_printf_i+0x174>
 8004c70:	0659      	lsls	r1, r3, #25
 8004c72:	bf48      	it	mi
 8004c74:	b2b6      	uxthmi	r6, r6
 8004c76:	e7e6      	b.n	8004c46 <_printf_i+0x182>
 8004c78:	4615      	mov	r5, r2
 8004c7a:	e7bb      	b.n	8004bf4 <_printf_i+0x130>
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	6826      	ldr	r6, [r4, #0]
 8004c80:	6961      	ldr	r1, [r4, #20]
 8004c82:	1d18      	adds	r0, r3, #4
 8004c84:	6028      	str	r0, [r5, #0]
 8004c86:	0635      	lsls	r5, r6, #24
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	d501      	bpl.n	8004c90 <_printf_i+0x1cc>
 8004c8c:	6019      	str	r1, [r3, #0]
 8004c8e:	e002      	b.n	8004c96 <_printf_i+0x1d2>
 8004c90:	0670      	lsls	r0, r6, #25
 8004c92:	d5fb      	bpl.n	8004c8c <_printf_i+0x1c8>
 8004c94:	8019      	strh	r1, [r3, #0]
 8004c96:	2300      	movs	r3, #0
 8004c98:	6123      	str	r3, [r4, #16]
 8004c9a:	4615      	mov	r5, r2
 8004c9c:	e7ba      	b.n	8004c14 <_printf_i+0x150>
 8004c9e:	682b      	ldr	r3, [r5, #0]
 8004ca0:	1d1a      	adds	r2, r3, #4
 8004ca2:	602a      	str	r2, [r5, #0]
 8004ca4:	681d      	ldr	r5, [r3, #0]
 8004ca6:	6862      	ldr	r2, [r4, #4]
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4628      	mov	r0, r5
 8004cac:	f7fb fa98 	bl	80001e0 <memchr>
 8004cb0:	b108      	cbz	r0, 8004cb6 <_printf_i+0x1f2>
 8004cb2:	1b40      	subs	r0, r0, r5
 8004cb4:	6060      	str	r0, [r4, #4]
 8004cb6:	6863      	ldr	r3, [r4, #4]
 8004cb8:	6123      	str	r3, [r4, #16]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cc0:	e7a8      	b.n	8004c14 <_printf_i+0x150>
 8004cc2:	6923      	ldr	r3, [r4, #16]
 8004cc4:	462a      	mov	r2, r5
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	4640      	mov	r0, r8
 8004cca:	47d0      	blx	sl
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d0ab      	beq.n	8004c28 <_printf_i+0x164>
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	079b      	lsls	r3, r3, #30
 8004cd4:	d413      	bmi.n	8004cfe <_printf_i+0x23a>
 8004cd6:	68e0      	ldr	r0, [r4, #12]
 8004cd8:	9b03      	ldr	r3, [sp, #12]
 8004cda:	4298      	cmp	r0, r3
 8004cdc:	bfb8      	it	lt
 8004cde:	4618      	movlt	r0, r3
 8004ce0:	e7a4      	b.n	8004c2c <_printf_i+0x168>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	4632      	mov	r2, r6
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	4640      	mov	r0, r8
 8004cea:	47d0      	blx	sl
 8004cec:	3001      	adds	r0, #1
 8004cee:	d09b      	beq.n	8004c28 <_printf_i+0x164>
 8004cf0:	3501      	adds	r5, #1
 8004cf2:	68e3      	ldr	r3, [r4, #12]
 8004cf4:	9903      	ldr	r1, [sp, #12]
 8004cf6:	1a5b      	subs	r3, r3, r1
 8004cf8:	42ab      	cmp	r3, r5
 8004cfa:	dcf2      	bgt.n	8004ce2 <_printf_i+0x21e>
 8004cfc:	e7eb      	b.n	8004cd6 <_printf_i+0x212>
 8004cfe:	2500      	movs	r5, #0
 8004d00:	f104 0619 	add.w	r6, r4, #25
 8004d04:	e7f5      	b.n	8004cf2 <_printf_i+0x22e>
 8004d06:	bf00      	nop
 8004d08:	08005e85 	.word	0x08005e85
 8004d0c:	08005e96 	.word	0x08005e96

08004d10 <memmove>:
 8004d10:	4288      	cmp	r0, r1
 8004d12:	b510      	push	{r4, lr}
 8004d14:	eb01 0402 	add.w	r4, r1, r2
 8004d18:	d902      	bls.n	8004d20 <memmove+0x10>
 8004d1a:	4284      	cmp	r4, r0
 8004d1c:	4623      	mov	r3, r4
 8004d1e:	d807      	bhi.n	8004d30 <memmove+0x20>
 8004d20:	1e43      	subs	r3, r0, #1
 8004d22:	42a1      	cmp	r1, r4
 8004d24:	d008      	beq.n	8004d38 <memmove+0x28>
 8004d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d2e:	e7f8      	b.n	8004d22 <memmove+0x12>
 8004d30:	4402      	add	r2, r0
 8004d32:	4601      	mov	r1, r0
 8004d34:	428a      	cmp	r2, r1
 8004d36:	d100      	bne.n	8004d3a <memmove+0x2a>
 8004d38:	bd10      	pop	{r4, pc}
 8004d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d42:	e7f7      	b.n	8004d34 <memmove+0x24>

08004d44 <_free_r>:
 8004d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d46:	2900      	cmp	r1, #0
 8004d48:	d044      	beq.n	8004dd4 <_free_r+0x90>
 8004d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d4e:	9001      	str	r0, [sp, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f1a1 0404 	sub.w	r4, r1, #4
 8004d56:	bfb8      	it	lt
 8004d58:	18e4      	addlt	r4, r4, r3
 8004d5a:	f000 f913 	bl	8004f84 <__malloc_lock>
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	; (8004dd8 <_free_r+0x94>)
 8004d60:	9801      	ldr	r0, [sp, #4]
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	b933      	cbnz	r3, 8004d74 <_free_r+0x30>
 8004d66:	6063      	str	r3, [r4, #4]
 8004d68:	6014      	str	r4, [r2, #0]
 8004d6a:	b003      	add	sp, #12
 8004d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d70:	f000 b90e 	b.w	8004f90 <__malloc_unlock>
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	d908      	bls.n	8004d8a <_free_r+0x46>
 8004d78:	6825      	ldr	r5, [r4, #0]
 8004d7a:	1961      	adds	r1, r4, r5
 8004d7c:	428b      	cmp	r3, r1
 8004d7e:	bf01      	itttt	eq
 8004d80:	6819      	ldreq	r1, [r3, #0]
 8004d82:	685b      	ldreq	r3, [r3, #4]
 8004d84:	1949      	addeq	r1, r1, r5
 8004d86:	6021      	streq	r1, [r4, #0]
 8004d88:	e7ed      	b.n	8004d66 <_free_r+0x22>
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	b10b      	cbz	r3, 8004d94 <_free_r+0x50>
 8004d90:	42a3      	cmp	r3, r4
 8004d92:	d9fa      	bls.n	8004d8a <_free_r+0x46>
 8004d94:	6811      	ldr	r1, [r2, #0]
 8004d96:	1855      	adds	r5, r2, r1
 8004d98:	42a5      	cmp	r5, r4
 8004d9a:	d10b      	bne.n	8004db4 <_free_r+0x70>
 8004d9c:	6824      	ldr	r4, [r4, #0]
 8004d9e:	4421      	add	r1, r4
 8004da0:	1854      	adds	r4, r2, r1
 8004da2:	42a3      	cmp	r3, r4
 8004da4:	6011      	str	r1, [r2, #0]
 8004da6:	d1e0      	bne.n	8004d6a <_free_r+0x26>
 8004da8:	681c      	ldr	r4, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	6053      	str	r3, [r2, #4]
 8004dae:	4421      	add	r1, r4
 8004db0:	6011      	str	r1, [r2, #0]
 8004db2:	e7da      	b.n	8004d6a <_free_r+0x26>
 8004db4:	d902      	bls.n	8004dbc <_free_r+0x78>
 8004db6:	230c      	movs	r3, #12
 8004db8:	6003      	str	r3, [r0, #0]
 8004dba:	e7d6      	b.n	8004d6a <_free_r+0x26>
 8004dbc:	6825      	ldr	r5, [r4, #0]
 8004dbe:	1961      	adds	r1, r4, r5
 8004dc0:	428b      	cmp	r3, r1
 8004dc2:	bf04      	itt	eq
 8004dc4:	6819      	ldreq	r1, [r3, #0]
 8004dc6:	685b      	ldreq	r3, [r3, #4]
 8004dc8:	6063      	str	r3, [r4, #4]
 8004dca:	bf04      	itt	eq
 8004dcc:	1949      	addeq	r1, r1, r5
 8004dce:	6021      	streq	r1, [r4, #0]
 8004dd0:	6054      	str	r4, [r2, #4]
 8004dd2:	e7ca      	b.n	8004d6a <_free_r+0x26>
 8004dd4:	b003      	add	sp, #12
 8004dd6:	bd30      	pop	{r4, r5, pc}
 8004dd8:	200005f8 	.word	0x200005f8

08004ddc <sbrk_aligned>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	4e0e      	ldr	r6, [pc, #56]	; (8004e18 <sbrk_aligned+0x3c>)
 8004de0:	460c      	mov	r4, r1
 8004de2:	6831      	ldr	r1, [r6, #0]
 8004de4:	4605      	mov	r5, r0
 8004de6:	b911      	cbnz	r1, 8004dee <sbrk_aligned+0x12>
 8004de8:	f000 f8bc 	bl	8004f64 <_sbrk_r>
 8004dec:	6030      	str	r0, [r6, #0]
 8004dee:	4621      	mov	r1, r4
 8004df0:	4628      	mov	r0, r5
 8004df2:	f000 f8b7 	bl	8004f64 <_sbrk_r>
 8004df6:	1c43      	adds	r3, r0, #1
 8004df8:	d00a      	beq.n	8004e10 <sbrk_aligned+0x34>
 8004dfa:	1cc4      	adds	r4, r0, #3
 8004dfc:	f024 0403 	bic.w	r4, r4, #3
 8004e00:	42a0      	cmp	r0, r4
 8004e02:	d007      	beq.n	8004e14 <sbrk_aligned+0x38>
 8004e04:	1a21      	subs	r1, r4, r0
 8004e06:	4628      	mov	r0, r5
 8004e08:	f000 f8ac 	bl	8004f64 <_sbrk_r>
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d101      	bne.n	8004e14 <sbrk_aligned+0x38>
 8004e10:	f04f 34ff 	mov.w	r4, #4294967295
 8004e14:	4620      	mov	r0, r4
 8004e16:	bd70      	pop	{r4, r5, r6, pc}
 8004e18:	200005fc 	.word	0x200005fc

08004e1c <_malloc_r>:
 8004e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e20:	1ccd      	adds	r5, r1, #3
 8004e22:	f025 0503 	bic.w	r5, r5, #3
 8004e26:	3508      	adds	r5, #8
 8004e28:	2d0c      	cmp	r5, #12
 8004e2a:	bf38      	it	cc
 8004e2c:	250c      	movcc	r5, #12
 8004e2e:	2d00      	cmp	r5, #0
 8004e30:	4607      	mov	r7, r0
 8004e32:	db01      	blt.n	8004e38 <_malloc_r+0x1c>
 8004e34:	42a9      	cmp	r1, r5
 8004e36:	d905      	bls.n	8004e44 <_malloc_r+0x28>
 8004e38:	230c      	movs	r3, #12
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	2600      	movs	r6, #0
 8004e3e:	4630      	mov	r0, r6
 8004e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e44:	4e2e      	ldr	r6, [pc, #184]	; (8004f00 <_malloc_r+0xe4>)
 8004e46:	f000 f89d 	bl	8004f84 <__malloc_lock>
 8004e4a:	6833      	ldr	r3, [r6, #0]
 8004e4c:	461c      	mov	r4, r3
 8004e4e:	bb34      	cbnz	r4, 8004e9e <_malloc_r+0x82>
 8004e50:	4629      	mov	r1, r5
 8004e52:	4638      	mov	r0, r7
 8004e54:	f7ff ffc2 	bl	8004ddc <sbrk_aligned>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	d14d      	bne.n	8004efa <_malloc_r+0xde>
 8004e5e:	6834      	ldr	r4, [r6, #0]
 8004e60:	4626      	mov	r6, r4
 8004e62:	2e00      	cmp	r6, #0
 8004e64:	d140      	bne.n	8004ee8 <_malloc_r+0xcc>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	4631      	mov	r1, r6
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	eb04 0803 	add.w	r8, r4, r3
 8004e70:	f000 f878 	bl	8004f64 <_sbrk_r>
 8004e74:	4580      	cmp	r8, r0
 8004e76:	d13a      	bne.n	8004eee <_malloc_r+0xd2>
 8004e78:	6821      	ldr	r1, [r4, #0]
 8004e7a:	3503      	adds	r5, #3
 8004e7c:	1a6d      	subs	r5, r5, r1
 8004e7e:	f025 0503 	bic.w	r5, r5, #3
 8004e82:	3508      	adds	r5, #8
 8004e84:	2d0c      	cmp	r5, #12
 8004e86:	bf38      	it	cc
 8004e88:	250c      	movcc	r5, #12
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	4638      	mov	r0, r7
 8004e8e:	f7ff ffa5 	bl	8004ddc <sbrk_aligned>
 8004e92:	3001      	adds	r0, #1
 8004e94:	d02b      	beq.n	8004eee <_malloc_r+0xd2>
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	442b      	add	r3, r5
 8004e9a:	6023      	str	r3, [r4, #0]
 8004e9c:	e00e      	b.n	8004ebc <_malloc_r+0xa0>
 8004e9e:	6822      	ldr	r2, [r4, #0]
 8004ea0:	1b52      	subs	r2, r2, r5
 8004ea2:	d41e      	bmi.n	8004ee2 <_malloc_r+0xc6>
 8004ea4:	2a0b      	cmp	r2, #11
 8004ea6:	d916      	bls.n	8004ed6 <_malloc_r+0xba>
 8004ea8:	1961      	adds	r1, r4, r5
 8004eaa:	42a3      	cmp	r3, r4
 8004eac:	6025      	str	r5, [r4, #0]
 8004eae:	bf18      	it	ne
 8004eb0:	6059      	strne	r1, [r3, #4]
 8004eb2:	6863      	ldr	r3, [r4, #4]
 8004eb4:	bf08      	it	eq
 8004eb6:	6031      	streq	r1, [r6, #0]
 8004eb8:	5162      	str	r2, [r4, r5]
 8004eba:	604b      	str	r3, [r1, #4]
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	f104 060b 	add.w	r6, r4, #11
 8004ec2:	f000 f865 	bl	8004f90 <__malloc_unlock>
 8004ec6:	f026 0607 	bic.w	r6, r6, #7
 8004eca:	1d23      	adds	r3, r4, #4
 8004ecc:	1af2      	subs	r2, r6, r3
 8004ece:	d0b6      	beq.n	8004e3e <_malloc_r+0x22>
 8004ed0:	1b9b      	subs	r3, r3, r6
 8004ed2:	50a3      	str	r3, [r4, r2]
 8004ed4:	e7b3      	b.n	8004e3e <_malloc_r+0x22>
 8004ed6:	6862      	ldr	r2, [r4, #4]
 8004ed8:	42a3      	cmp	r3, r4
 8004eda:	bf0c      	ite	eq
 8004edc:	6032      	streq	r2, [r6, #0]
 8004ede:	605a      	strne	r2, [r3, #4]
 8004ee0:	e7ec      	b.n	8004ebc <_malloc_r+0xa0>
 8004ee2:	4623      	mov	r3, r4
 8004ee4:	6864      	ldr	r4, [r4, #4]
 8004ee6:	e7b2      	b.n	8004e4e <_malloc_r+0x32>
 8004ee8:	4634      	mov	r4, r6
 8004eea:	6876      	ldr	r6, [r6, #4]
 8004eec:	e7b9      	b.n	8004e62 <_malloc_r+0x46>
 8004eee:	230c      	movs	r3, #12
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	f000 f84c 	bl	8004f90 <__malloc_unlock>
 8004ef8:	e7a1      	b.n	8004e3e <_malloc_r+0x22>
 8004efa:	6025      	str	r5, [r4, #0]
 8004efc:	e7de      	b.n	8004ebc <_malloc_r+0xa0>
 8004efe:	bf00      	nop
 8004f00:	200005f8 	.word	0x200005f8

08004f04 <_realloc_r>:
 8004f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f08:	4680      	mov	r8, r0
 8004f0a:	4614      	mov	r4, r2
 8004f0c:	460e      	mov	r6, r1
 8004f0e:	b921      	cbnz	r1, 8004f1a <_realloc_r+0x16>
 8004f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f14:	4611      	mov	r1, r2
 8004f16:	f7ff bf81 	b.w	8004e1c <_malloc_r>
 8004f1a:	b92a      	cbnz	r2, 8004f28 <_realloc_r+0x24>
 8004f1c:	f7ff ff12 	bl	8004d44 <_free_r>
 8004f20:	4625      	mov	r5, r4
 8004f22:	4628      	mov	r0, r5
 8004f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f28:	f000 f838 	bl	8004f9c <_malloc_usable_size_r>
 8004f2c:	4284      	cmp	r4, r0
 8004f2e:	4607      	mov	r7, r0
 8004f30:	d802      	bhi.n	8004f38 <_realloc_r+0x34>
 8004f32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f36:	d812      	bhi.n	8004f5e <_realloc_r+0x5a>
 8004f38:	4621      	mov	r1, r4
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	f7ff ff6e 	bl	8004e1c <_malloc_r>
 8004f40:	4605      	mov	r5, r0
 8004f42:	2800      	cmp	r0, #0
 8004f44:	d0ed      	beq.n	8004f22 <_realloc_r+0x1e>
 8004f46:	42bc      	cmp	r4, r7
 8004f48:	4622      	mov	r2, r4
 8004f4a:	4631      	mov	r1, r6
 8004f4c:	bf28      	it	cs
 8004f4e:	463a      	movcs	r2, r7
 8004f50:	f7ff fbb8 	bl	80046c4 <memcpy>
 8004f54:	4631      	mov	r1, r6
 8004f56:	4640      	mov	r0, r8
 8004f58:	f7ff fef4 	bl	8004d44 <_free_r>
 8004f5c:	e7e1      	b.n	8004f22 <_realloc_r+0x1e>
 8004f5e:	4635      	mov	r5, r6
 8004f60:	e7df      	b.n	8004f22 <_realloc_r+0x1e>
	...

08004f64 <_sbrk_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	4d06      	ldr	r5, [pc, #24]	; (8004f80 <_sbrk_r+0x1c>)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	602b      	str	r3, [r5, #0]
 8004f70:	f7fb ff56 	bl	8000e20 <_sbrk>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_sbrk_r+0x1a>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_sbrk_r+0x1a>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	20000600 	.word	0x20000600

08004f84 <__malloc_lock>:
 8004f84:	4801      	ldr	r0, [pc, #4]	; (8004f8c <__malloc_lock+0x8>)
 8004f86:	f000 b811 	b.w	8004fac <__retarget_lock_acquire_recursive>
 8004f8a:	bf00      	nop
 8004f8c:	20000604 	.word	0x20000604

08004f90 <__malloc_unlock>:
 8004f90:	4801      	ldr	r0, [pc, #4]	; (8004f98 <__malloc_unlock+0x8>)
 8004f92:	f000 b80c 	b.w	8004fae <__retarget_lock_release_recursive>
 8004f96:	bf00      	nop
 8004f98:	20000604 	.word	0x20000604

08004f9c <_malloc_usable_size_r>:
 8004f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fa0:	1f18      	subs	r0, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bfbc      	itt	lt
 8004fa6:	580b      	ldrlt	r3, [r1, r0]
 8004fa8:	18c0      	addlt	r0, r0, r3
 8004faa:	4770      	bx	lr

08004fac <__retarget_lock_acquire_recursive>:
 8004fac:	4770      	bx	lr

08004fae <__retarget_lock_release_recursive>:
 8004fae:	4770      	bx	lr

08004fb0 <_init>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr

08004fbc <_fini>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr
